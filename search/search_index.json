{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"glm-py","text":"<p>Python API for the General Lake Model (GLM).</p>"},{"location":"#glm","title":"GLM","text":"<p>GLM is a 1-dimensional lake water balance and stratification model. It can also be coupled with the AED modelling library to support simulations of lake water quality and ecosystem processes.</p> <p>GLM is suitable for a wide range of natural and engineered lakes, including shallow (well-mixed) and deep (stratified) systems. The model has been successfully applied to systems from the scale of individual ponds and wetlands to the scale of Great Lakes.</p> <p>For more information about running GLM, please see the model website's scientific basis description and the GLM workbook. </p> <p>The GLM model is available as an executable for Linux (Ubuntu), MacOS, and Windows. It is actively developed by the  Aquatic EcoDynamics research group at The University of Western Australia.</p>"},{"location":"#why-glm-py","title":"Why glm-py?","text":"<p>glm-py is an object-oriented API for preparing GLM inputs, running simulations, and processing outputs. </p> <p>Its goal is to make working with GLM as easy as possible while providing sufficient depth to meet more complex use cases. At its most basic, a GLM simulation can be run and visualised in just a few lines of code:</p> <p><pre><code>import matplotlib.pyplot as plt\n\nfrom glmpy.plots import NCPlotter\nfrom glmpy.simulation import GLMSim\n\n\noutputs = GLMSim.from_example_sim(\"sparkling_lake\").run()\n\nnc = NCPlotter(outputs.get_netcdf_path())\n\nfig, ax = plt.subplots(figsize=(10, 5))\nprofile = nc.plot_profile(ax=ax, var_name=\"temp\")\nfig.colorbar(profile).set_label(\"Temperature (\u00b0C)\")\n</code></pre> </p> <p>The API is designed to be interoperable with existing GLM workflows and easily extendable by users. glm-py can be used for running GLM simulations within local Python environments, running batches of GLM simulations on HPCs, or for interfacing with web applications/cloud services that use GLM.</p>"},{"location":"development/","title":"Development setup","text":""},{"location":"development/#environment","title":"Environment","text":"<p>A Docker container can be used to create a development environment. You can either build the Docker image:</p> <p><pre><code>docker build -t glmpy-dev .devcontainer\n</code></pre> Or, you can develop glmpy using a dev container. </p>"},{"location":"development/#code-style","title":"Code style","text":"<p>Code linting and formatting uses ruff and black. A script to format the glm-met repository can be run: <code>./scripts/format.sh</code>. </p> <p>pre-commit is used to run ruff and black. </p>"},{"location":"development/#tests","title":"Tests","text":"<p>pytest is used for testing glm-py. </p> <p>If testing, please add tests under the <code>tests</code> directory. If you need test data for running tests, add them as <code>pytest.fixtures</code> in <code>conftest.py</code>. </p>"},{"location":"development/#docs","title":"Docs","text":"<p>Build the docs (from the package root): </p> <pre><code>mkdocs serve \n</code></pre>"},{"location":"development/#build-package","title":"Build package","text":"<pre><code>python -m build\n</code></pre>"},{"location":"development/#release-to-pypi","title":"Release to PyPI","text":"<p>Use semantic versioning, versioneer, GitHub Actions workflows. Push to GitHub with a <code>vX.X.X</code> tag to trigger a the <code>build-and-deploy.yml</code> workflow.</p> <p><code>build-and-deploy.yml</code> will build glm-py and push the new release to PyPI. </p> <p>To use versioneer:</p> <pre><code>pip install versioneer\n</code></pre> <p>Then add the following to <code>pyproject.toml</code>:</p> <pre><code>[build-system]\nrequires = [\"setuptools&gt;=61.0.0\", \"versioneer[toml]\"]\nbuild-backend = \"setuptools.build_meta\"\n</code></pre> <p>and</p> <pre><code># See the docstring in versioneer.py for instructions. Note that you must\n# re-run 'versioneer.py setup' after changing this section, and commit the\n# resulting files.\n\n[tool.versioneer]\nVCS = \"git\"\nstyle = \"pep440\"\nversionfile_source = \"glmpy/_version.py\"\nversionfile_build = \"glmpy/_version.py\"\ntag_prefix = \"v\"\nparentdir_prefix = \"glmpy-\"\n</code></pre> <p>and</p> <pre><code>[project.optional-dependencies]\ntoml = [\"tomli; python_version &lt; '3.11'\"]\n</code></pre> <p>Create <code>setup.py</code>:</p> <pre><code>touch setup.py\n</code></pre> <p>and add the following to <code>setup.py</code>:</p> <pre><code>from setuptools import setup\n\nimport versioneer\n\n# see pyproject.toml for static project metadata\nsetup(\n    version=versioneer.get_version(),\n    cmdclass=versioneer.get_cmdclass(),\n)\n</code></pre> <p>Run:</p> <pre><code>versioneer install --vendor\n</code></pre>"},{"location":"development/#code-style_1","title":"Code style","text":"<ul> <li>Format all code using black (see <code>./scripts/format.sh</code>)</li> <li>Manually correct all ruff errors</li> <li>Use pre-commit to format Python code before git commits</li> <li>Use NumPy style docstrings - follow NumPy conventions</li> </ul>"},{"location":"development/#methods-function-docstring","title":"Methods / function docstring","text":"<p>Example from Pandas:</p> <ul> <li>Summary - one line function / method summary.</li> <li>Extended summary - one or two sentences outlining what the function achieves and when / where it is used.</li> <li>Parameter description - list function arguments, keywords, and types.</li> <li>Returns / yields section - list returns / yields from the function and their types.</li> <li>Notes - optional notes section.</li> <li>Examples - example to illustrate how the function can be used.</li> </ul> <pre><code>\"\"\"\nAdd up two integer numbers.\n\nThis function simply wraps the ``+`` operator, and does not\ndo anything interesting, except for illustrating what\nthe docstring of a very simple function looks like.\n\nParameters\n----------\nnum1 : int\n    First number to add.\nnum2 : int\n    Second number to add.\n\nReturns\n-------\nint\n    The sum of ``num1`` and ``num2``.\n\nSee Also\n--------\nsubtract : Subtract one integer from another.\n\nExamples\n--------\n&gt;&gt;&gt; add(2, 2)\n4\n&gt;&gt;&gt; add(25, 0)\n25\n&gt;&gt;&gt; add(10, -10)\n0\n\"\"\"\n</code></pre>"},{"location":"development/#class-docstring","title":"Class docstring","text":"<ul> <li>Summary - one line class summary.</li> <li>Extended summary - one or two sentences outlining the class purpose and use.</li> <li>Attributes description - list function arguments, keywords, and types.</li> <li>Example - short example indicating class usage.</li> <li>Notes - optional notes section</li> </ul> <p>Do not list methods - add docstrings to methods within the class. </p>"},{"location":"dimensions/","title":"Dimensions","text":""},{"location":"dimensions/#glmpy.dimensions.InvertedTruncatedCone","title":"<code>InvertedTruncatedCone</code>","text":"<p>Calculates the volume and surface area of an inverted truncated cone.</p> <p>Useful for calculating the <code>A</code> and <code>H</code> morphometry parameters for simple water bodies. Assumes only the height (i.e., depth), side slope, and surface radius of the water body are known.</p> <p>Attributes:</p> Name Type Description <code>height</code> <code>Union[float, int]</code> <p>Height of the water body from the base to surface in metres.</p> <code>surface_radius</code> <code>Union[float, int]</code> <p>Surface radius of the water body in metres.</p> <code>num_vals</code> <code>int</code> <p>The number of values to be returned by the <code>get_volumes()</code>, <code>get_surface_areas()</code>, and <code>get_heights()</code> methods. <code>num_vals</code> should be the same as the <code>bsn_vals</code> parameter from the <code>&amp;morphometry</code> block and be &gt;= 2.</p> <code>side_slope</code> <code>Union[float, int]</code> <p>Side slope of water body - the rise over run (metre/metre).</p> <code>surface_elevation</code> <code>float</code> <p>Elevation at the water body surface. Shifts the values returned by <code>get_heights()</code> up or down.</p>"},{"location":"dimensions/#glmpy.dimensions.InvertedTruncatedCone.get_heights","title":"<code>get_heights()</code>","text":"<p>Calculates heights.</p> <p>Returns a list of heights (m) from base to surface. The number of heights is determined by the <code>num_vals</code> attribute. Heights can be adjusted for different surface elevations by increasing or decreasing the <code>surface_elevation</code> attribute.</p> <p>Returns:</p> Name Type Description <code>heights</code> <code>list</code> <p>Heights (m) from base to surface.</p>"},{"location":"dimensions/#glmpy.dimensions.InvertedTruncatedCone.get_surface_areas","title":"<code>get_surface_areas()</code>","text":"<p>Calculates surface areas.</p> <p>Returns a list of surface areas (m^2) that correspond with the heights returned by <code>get_heights()</code>. The length of the list is determined by the <code>num_vals</code> attribute. Surface areas are returned as a list of floats where the first item is the area at the bottom of the water body and the last is the area at the surface.</p> <p>Returns:</p> Name Type Description <code>surface_areas</code> <code>list</code> <p>Surface areas of water body (m^2).</p>"},{"location":"dimensions/#glmpy.dimensions.InvertedTruncatedCone.get_volumes","title":"<code>get_volumes()</code>","text":"<p>Calculates volumes</p> <p>Returns a list of volumes (m^3) that correspond with the heights returned by <code>get_heights()</code>. The length of the list equals the <code>num_vals</code> attribute. Volumes are returned as a list where the first item is the volume at the bottom of the water body and the last is the volume at the surface.</p> <p>Returns:</p> Name Type Description <code>volume</code> <code>list</code> <p>The water body volumes (m^3).</p>"},{"location":"dimensions/#glmpy.dimensions.InvertedTruncatedPyramid","title":"<code>InvertedTruncatedPyramid</code>","text":"<p>Calculates the volume and surface area of an inverted truncated pyramid.</p> <p>Useful for calculating the <code>A</code> and <code>H</code> morphometry parameters for simple water bodies such as reservoirs. Assumes only the height (i.e., depth), side slope, surface length, and surface width of the water body are known.</p> <p>Attributes:</p> Name Type Description <code>height</code> <code>Union[float, int]</code> <p>Height of water body from the base to surface in metres.</p> <code>surface_length</code> <code>Union[float, int]</code> <p>Surface length of the water body in metres.</p> <code>surface_width</code> <code>Union[float, int]</code> <p>Surface width of the water body in metres.</p> <code>num_vals</code> <code>int</code> <p>The number of values to be returned by the <code>get_volumes()</code>, <code>get_surface_areas()</code>, and <code>get_heights()</code> methods. <code>num_vals</code> should be the same as the <code>bsn_vals</code> parameter from the <code>&amp;morphometry</code> block and be &gt;= 2.</p> <code>side_slope</code> <code>Union[float, int]</code> <p>Side slope of water body - the rise over run (metre/metre).</p> <code>surface_elevation</code> <code>float</code> <p>Elevation at the water body surface. Shifts the values returned by <code>get_heights()</code> up or down.</p>"},{"location":"dimensions/#glmpy.dimensions.InvertedTruncatedPyramid.get_heights","title":"<code>get_heights()</code>","text":"<p>Calculates heights.</p> <p>Returns a list of heights (m) from base to surface. The number of heights is determined by the <code>num_vals</code> attribute. Heights can be adjusted for different surface elevations by increasing or decreasing the <code>surface_elevation</code> attribute.</p> <p>Returns:</p> Name Type Description <code>heights</code> <code>list</code> <p>Heights (m) from base to surface.</p>"},{"location":"dimensions/#glmpy.dimensions.InvertedTruncatedPyramid.get_surface_areas","title":"<code>get_surface_areas()</code>","text":"<p>Calculates surface areas.</p> <p>Returns a list of surface areas (m^2) that correspond with the heights returned by <code>get_heights()</code>. The length of the list is determined by the <code>num_vals</code> attribute. Surface areas are returned as a list of floats where the first item is the area at the bottom of the water body and the last is the area at the surface.</p> <p>Returns:</p> Name Type Description <code>surface_areas</code> <code>list</code> <p>Surface areas of water body (m^2).</p>"},{"location":"dimensions/#glmpy.dimensions.InvertedTruncatedPyramid.get_volumes","title":"<code>get_volumes()</code>","text":"<p>Calculates volumes.</p> <p>Returns a list of volumes (m^3) that correspond with the heights returned by <code>get_heights()</code>. The length of the list equals the <code>num_vals</code> attribute. Volumes are returned as a list where the first item is the volume at the bottom of the water body and the last is the volume at the surface.</p> <p>Returns:</p> Name Type Description <code>volume</code> <code>list</code> <p>The water body volumes (m^3).</p>"},{"location":"farm-dam-tutorial/","title":"Tutorials","text":""},{"location":"farm-dam-tutorial/#farm-dam","title":"Farm Dam","text":""},{"location":"farm-dam-tutorial/#introduction","title":"Introduction","text":"<p>In this tutorial, you will use <code>glmpy</code> to construct a simple model of a farm dam in the Western Australian (WA) Wheatbelt. The WA Wheatbelt is a semi-arid agricultural region dominated by rain-fed cropping and livestock production. Farm dams play a crucial role in storing fresh water for irrigation and animal consumption during the dry summer months. Climate change is warming the Wheatbelt and increasingly disrupting the winter rainfall patterns that fill farm dams. When dams dry out, the impact to farmers and animals can be servere. Modelling the water balance of these small water bodies is important to minimise their risk of failure under a drying climate.</p> <p>In the map below, you can see the dam is connected to a large catchment area. These catchments are often constructed up-hill from the dam and consist of a compacted clay surface. This design increases runoff during rainfall events and channels the water into the dam. To accurately model the dam, we will need to incorporate the inflows from this catchment.</p>"},{"location":"farm-dam-tutorial/#model-setup","title":"Model setup","text":"<p>Let's start building the model. <code>glmpy</code> provides a set of classes in the <code>nml</code> module that can be used to construct the GLM namelist file (<code>.nml</code>). The <code>.nml</code> file is simply a text file that contains a set of parameters which configure the model. These parameters are grouped into different components that each configure different aspects of the model. For every component, there is a corresponding class in the <code>nml</code> module that you can use to construct the namelist file, e.g., the <code>NMLMeteorology</code> class configures the <code>&amp;meteorology</code> parameters. Go ahead and import the <code>nml</code> module:</p> <pre><code>from glmpy import nml\n</code></pre> <p>The first component we will configure is the <code>&amp;setup</code> component. These parameters control the model layers. GLM is a 1-D model that simulates a water body as a vertical series of layers. The number of layers, and their thickness, is dynamic. Layers will expand, contract, merge, and split in response to water and surface mass fluxes.  The <code>&amp;setup</code> component defines the initial state of these layers. The <code>NMLSetup</code> class constructor takes the following arguments:</p> <ul> <li><code>sim_name</code>: The name of your simulation</li> <li><code>max_layers</code>: The maximum number of layers that can be created during the simulation</li> <li><code>min_layer_vol</code>: The minimum volume of a layer in cubic metres</li> <li><code>min_layer_thick</code>: The minimum thickness of a layer in metres</li> <li><code>max_layer_thick</code>: The maximum thickness of a layer in metres</li> <li><code>density_model</code>: The equation used to calculate the density of water in each layer</li> <li><code>non_avg</code>: A flag to indicate whether the model should use non-averaged layers</li> </ul> <p>Let's initialise our model with a maximum of 100 layers. Each layer must contain at least 0.1 m<sup>3</sup> of water and range in thickness from 0.01-1.0 m. By setting <code>density_model</code> to 1, we'll use a model from TEOS-10 that calculates the density as a function of local temperature and salinity. Finally, we'll set <code>non_avg</code> to <code>True</code> to indicate that we want to use non-averaged layers.</p> <pre><code>setup = nml.NMLSetup(\n    sim_name='farm_dam',\n    max_layers=100,\n    min_layer_vol=0.1,\n    min_layer_thick=0.01,\n    max_layer_thick=1.0,\n    density_model=1,\n    non_avg=True\n)\n</code></pre>"},{"location":"farm-dam-tutorial/#model-duration","title":"Model duration","text":"<p>Our model will run over a 10 year period from 2010 to 2020 at an hourly timestep. The <code>&amp;time</code> component defines the start and stop time of the simulation, the time step, and the time zone. We can use <code>NMLTime</code> class constructor to configure these properties:</p> <pre><code>time = nml.NMLTime(\n    timefmt=2,\n    start=\"2010-01-01 00:00:00\",\n    stop=\"2020-12-31 00:00:00\",\n    dt=3600,\n    timezone=8\n)\n</code></pre> <p>Here, we have specified the <code>timefmt</code> as <code>2</code> which configures GLM to accept <code>start</code> and <code>stop</code> times. Alternatively, a <code>timefmt=3</code> allows GLM to read the <code>num_days</code> parameter. The <code>start</code> and <code>stop</code> times are specified as strings in the format <code>YYYY-MM-DD HH:MM:SS</code>. The <code>dt</code> parameter is the time step in seconds (3600 seconds in an hour). The <code>timezone</code> parameter is the time zone offset from UTC in hours.</p>"},{"location":"farm-dam-tutorial/#dam-morphometry","title":"Dam morphometry","text":"<p>Next, we'll define the dam morphometry, i.e., the physical dimensions that capture the shape of the water body. GLM records the morphometry of a water body by a list of height and surface area pairs. The heights are vertical distances from the bottom of the water body to the surface. Similarly, the surface areas are the horizontal area of the water body at the each height increment. The number of height/surface-area pairs you need to provide largely depends on how complex the morphometry is. For dams, the morphometry is simple. Most farm dams often resembles an truncated pyramid that has been inverted. Conveniently, <code>glmpy</code> provides a <code>SimpleTruncatedPyramidWaterBody</code> class in the <code>dimensions</code> module to easily calculate the height/surface-area pairs!</p> <p><pre><code>from glmpy import dimensions\n</code></pre> The <code>SimpleTruncatedPyramidWaterBody</code> constructor takes the following arguments:</p> <ul> <li><code>height</code>: The height (i.e., the depth) of the dam in metres.</li> <li><code>surface_width</code>: The width of the dam surface in metres.</li> <li><code>surface_length</code>: The length of the dam surface in metres.</li> <li><code>side_slope</code>: The rise over run of the dam side slopes</li> </ul> <p> </p> <p>Three of these arguments are known from the information on our map: <code>height</code>, <code>surface_width</code>, and <code>surface_length</code>. The <code>side_slope</code> is unknown so here we will make an assumption. Farm dams in the WA Wheatbelt are typically constructed with a side slope of 3:1. This means the dam slopes 3 metres vertically for every 1 metre horizontally. Based on this assumption we can now construct the <code>SimpleTruncatedPyramidWaterBody</code> object.</p> <pre><code>dam_morphometry = dimensions.SimpleTruncatedPyramidWaterBody(\n    height=5,\n    surface_width=40,\n    surface_length=62,\n    side_slope=3\n)\n</code></pre> <p>By calling the  <code>get_heights()</code> and <code>get_surface_areas()</code> method on the <code>dam_morphometry</code> object you can return a list of height/surface-area pairs.</p> <pre><code>dam_morphometry.get_heights()\n</code></pre> <pre><code>[-5, -4, -3, -2, -1, 0]\n</code></pre> <pre><code>dam_morphometry.get_surface_areas()\n</code></pre> <pre><code>[2151.111, 2215.111, 2280.0, 2345.774, 2412.444, 2480.0]\n</code></pre> <p>We now have the morphometry of our dam! Let's use these values as inputs to the <code>NMLMorphometry</code> constructor. We'll need to set the following arguments:</p> <ul> <li><code>lake_name</code>: The name of the water body</li> <li><code>latitude</code>: The latitude of the water body</li> <li><code>longitude</code>: The longitude of the water body</li> <li><code>base_elev</code>: The elevation of the bottom of the water body</li> <li><code>crest_elev</code>: The elevation of the top of the water body</li> <li><code>bsn_len</code>: The surface length of the water body in metres</li> <li><code>bsn_wid</code>: The surface width of the water body in metres</li> <li><code>A</code>: A list of surface areas. We just calculated this!</li> <li><code>H</code>: A list of heights. We just calculated this!</li> </ul> <p><code>latitude</code> and <code>longitude</code> are easy, just check the map! What about <code>base_elev</code> and <code>crest_elev</code>? On this farm in the Wheatbelt we're 332 m above sea level. We'll set the <code>crest_elev</code> to <code>332</code>, and the <code>base_elev</code> to <code>332 - 5</code>, i.e., minus the dam depth. <code>bsn_wid</code> and <code>bsn_len</code> are the surface dimensions of the dam while <code>A</code> and <code>H</code> are values we calculated from the <code>dam_morphometry</code> object.</p> <pre><code>morphometry = nml.NMLMorphometry(\n    lake_name = \"Farm dam\",\n    latitude = -32.474,\n    longitude = 116.988,\n    base_elev = 327,\n    crest_elev = 332,\n    bsn_len = 62,\n    bsn_wid = 40,\n    H = dam_morphometry.get_heights(),\n    A = dam_morphometry.get_surface_areas()\n)\n</code></pre>"},{"location":"farm-dam-tutorial/#initial-profiles","title":"Initial profiles","text":"<p>Let's fill up the dam! The <code>&amp;init_profiles</code> component of the GLM <code>.nml</code> file defines the initial state of water in the dam. We provide the initial water level (<code>lake_depth</code>), the water quality variables we want to simulate, and a set of depths where we can set the initialise certain conditions in the water profile.</p> <p>In this simulation, we're only interested in the water balance of our farm dam so we'll ignore the water quality variables. Our dam will start with 4 m of water and we'll set two depths at which we we'll initialise water temperature/salinity. The first depth will be at 1 m and the second at 3 m. We'll set the temperature and salinity at both depths to 18 \u00b0C and 0 ppt, respectively.</p> <pre><code>init_profiles = nml.NMLInitProfiles(\n    lake_depth = 4,\n    num_depth = 2,\n    the_depths = [1, 3],\n    the_temps = [18.0, 18.0],\n    the_sals = [0.0, 0.0]\n)\n</code></pre>"},{"location":"farm-dam-tutorial/#meteorology","title":"Meteorology","text":"<p>To setup the meteorology component of the <code>.nml</code> file we need some nearby data on rainfall and temperature for each day of our simulation. Click here to download some pre-prepared data from the Bureau of Meteorology's weather station at the nearby town of Pingelly:</p> <p>Inspecting the CSV, you'll see daily observations from <code>2010-01-01 00:00:00</code> to <code>2020-12-31 00:00:00</code>:</p> date temperature rainfall 2010-01-01 00:00:00 29.5 0.0 2010-01-02 00:00:00 33.4 0.0 2010-01-03 00:00:00 38.6 0.0 2010-01-04 00:00:00 32.2 0.0 2010-01-05 00:00:00 37.2 0.0 <pre><code>meteorology = nml.NMLMeteorology(\n    met_sw = True,\n    meteo_fl = 'path/to/dam_tutorial_met_data.csv',\n    subdaily = False,\n    time_fmt = 'YYYY-MM-DD hh:mm:ss',\n    ???\n)\n</code></pre>"},{"location":"farm-dam-tutorial/#catchment-inflows","title":"Catchment inflows","text":"<p>Let's now return to the large catchment mentioned at the beginning of this tutorial. During a rainfall event, this catchment captures additional inputs from beyond the spatial extent of the dam. This can be accounted for by configuring the <code>&amp;inflow</code> component of the <code>.nml</code>. Catchment inflows are a function of the catchment area, rainfall, and a runoff threshold. The <code>NMLInflow</code> class expects a CSV with inflows pre-calculated for each day of the simulation. We'll use some of the additional functionality in <code>glmpy</code> to calculate this timeseries.</p> <p>Start by importing the <code>inflows</code> module:</p> <pre><code>from glmpy import inflows\n</code></pre> <p>The <code>CatchmentInflows</code> class will calculate daily inflows from the catchment area and our meteorological data. Dam catchments typically start producing runoff when rainfall exceeds 8 mm.</p> <pre><code>inflows = inflows.CatchmentInflows(\n    input_type = 'dataframe',\n    met_data = met_data,\n    catchment_area = 32000,\n    runoff_threshold = 0.008,\n    precip_col = 'rainfall',\n    date_time_col = 'time'\n)\n</code></pre>"},{"location":"flows/","title":"Flows","text":""},{"location":"flows/#glmpy.flows.catchment_runoff_inflows","title":"<code>catchment_runoff_inflows(met_pd, date_time_col, precip_col, catchment_area, runoff_coef=None, runoff_threshold=None)</code>","text":"<p>Calculate catchment runoff inflows from rainfall.</p> <p>Returns a DataFrame of inflow by calculating catchment runoff from precipitation data. Inflows are calculated at the same timestep as the precipitation data but in units of m^3/s.</p> <p>Parameters:</p> Name Type Description Default <code>met_pd</code> <code>DataFrame</code> <p>A pandas DataFrame of meteorological data.</p> required <code>date_time_col</code> <code>str</code> <p>Name of the column in the DataFrame containing datetime values.</p> required <code>precip_col</code> <code>str</code> <p>Name of the column in the DataFrame containing precipitation data in m/day or m/hour.</p> required <code>catchment_area</code> <code>Union[float, int]</code> <p>Area of the catchment in square meters.</p> required <code>runoff_coef</code> <code>Union[float, None]</code> <p>Runoff coefficient for the catchment. The fraction of rainfall that will result in runoff. Either <code>runoff_coef</code> or <code>runoff_threshold</code> must be provided.</p> <code>None</code> <code>runoff_threshold</code> <code>Union[float, None]</code> <p>Runoff threshold for the catchment. The amount of rainfall in mm to generate runoff. Either <code>runoff_coef</code> or <code>runoff_threshold</code> must be provided.</p> <code>None</code> <p>Examples:</p> <p>Generates a daily timeseries of rainfall then calculates inflows with a 50% runoff coefficient and a 1000 m^2 catchment area:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; from glmpy import flows\n&gt;&gt;&gt; daily_met_pd = pd.DataFrame({\n...     'date': pd.date_range(\n...         start='1997-01-01',\n...         end='2004-12-31',\n...         freq='24h'),\n...     'rain': 0.024 #m per day\n... })\n&gt;&gt;&gt; inflows_pd = flows.catchment_runoff_inflows(\n...     met_pd=daily_met_pd,\n...     date_time_col='date',\n...     precip_col='rain',\n...     catchment_area=1000,\n...     runoff_coef=0.5,\n... )\n</code></pre>"},{"location":"installation/","title":"Install","text":""},{"location":"installation/#quick-start","title":"Quick start","text":"<p>Install glm-py with <code>pip</code>:</p> <pre><code>pip install glm-py\n</code></pre>"},{"location":"installation/#built-distribution-recommended","title":"Built distribution (recommended)","text":"<p>The built distribution of glm-py comes bundled with the GLM binary.  <code>pip</code> will automatically download the built distribution of glm-py providing:</p> <ul> <li>You have CPython 3.9-3.12 or PyPy 3.9-3.10 installed </li> <li>You are running one of the supported OS/architectures listed in the table below</li> </ul> Linux Macos Windows x86_64 \u2705 \u2705 \u274c ARM64 \u2705 \u2705 \u274c"},{"location":"installation/#source-distribution","title":"Source distribution","text":"<p>In the event your system does not meet the above requirements, <code>pip</code> will install the source distribution. The source distribution does not ship with the GLM binary. You will still be able to use glm-py (e.g., to create <code>.nml</code> files) but the package will raise an error when you call the <code>glm_run()</code> method from the <code>simulation.GLMSim</code> class.</p> <p>To run GLM, you will either need to source a pre-compiled binary or compile GLM yourself. The <code>glm_path</code> parameter of the <code>glm_run()</code> method can be used to tell glm-py where to run the binary from.</p>"},{"location":"installation/#release-history","title":"Release history","text":"<p>The following table lists the GLM version that is bundled with the built distribution of each glm-py release:</p> glm-py version GLM version <code>0.5.*</code> <code>3.3.3</code> <code>0.4.*</code> <code>3.3.1a12</code> <code>0.3.*</code> <code>3.3.1a12</code> <code>0.2.*</code> <code>3.3.1a12</code> <code>0.1.*</code> <code>3.3.1a12</code>"},{"location":"nml/","title":"NML","text":""},{"location":"nml/#glmpy.nml.aed_nml","title":"<code>aed_nml</code>","text":""},{"location":"nml/#glmpy.nml.aed_nml.AEDNML","title":"<code>AEDNML</code>","text":"<p>             Bases: <code>NML</code></p> <p><code>NML</code> subclass for the <code>aed</code> .NML file.</p> <p>Attributes:</p> Name Type Description <code>blocks</code> <code>Dict[str, NMLBlock]</code> <p>Dictionary of <code>NMLBlock</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off block and parameter validation.</p>"},{"location":"nml/#glmpy.nml.aed_nml.AEDNML.__init__","title":"<code>__init__(aed_models=ModelsBlock(), aed_tracer=TracerBlock(), aed_noncohesive=NonCohesiveBlock(), aed_oxygen=OxygenBlock(), aed_carbon=CarbonBlock(), aed_sedflux=SedFluxBlock(), aed_sed_const2d=SedConst2DBlock(), aed_silica=SilicaBlock(), aed_nitrogen=NitrogenBlock(), aed_phosphorus=PhosphorusBlock(), aed_organic_matter=OrganicMatterBlock(), aed_phytoplankton=PhytoplanktonBlock(), aed_zooplankton=ZooplanktonBlock(), aed_macrophyte=MacrophyteBlock(), aed_bivalve=BivalveBlock(), aed_totals=TotalsBlock())</code>","text":"<p>Parameters:</p> Name Type Description Default <code>aed_models</code> <code>ModelsBlock</code> <code>ModelsBlock()</code> <code>aed_tracer</code> <code>TracerBlock</code> <code>TracerBlock()</code> <code>aed_noncohesive</code> <code>NonCohesiveBlock</code> <code>NonCohesiveBlock()</code> <code>aed_oxygen</code> <code>OxygenBlock</code> <code>OxygenBlock()</code> <code>aed_carbon</code> <code>CarbonBlock</code> <code>CarbonBlock()</code> <code>aed_sedflux</code> <code>SedFluxBlock</code> <code>SedFluxBlock()</code> <code>aed_sed_const2d</code> <code>SedConst2DBlock</code> <code>SedConst2DBlock()</code> <code>aed_silica</code> <code>SilicaBlock</code> <code>SilicaBlock()</code> <code>aed_nitrogen</code> <code>NitrogenBlock</code> <code>NitrogenBlock()</code> <code>aed_phosphorus</code> <code>PhosphorusBlock</code> <code>PhosphorusBlock()</code> <code>aed_organic_matter</code> <code>OrganicMatterBlock</code> <code>OrganicMatterBlock()</code> <code>aed_phytoplankton</code> <code>PhytoplanktonBlock</code> <code>PhytoplanktonBlock()</code> <code>aed_zooplankton</code> <code>ZooplanktonBlock</code> <code>ZooplanktonBlock()</code> <code>aed_macrophyte</code> <code>MacrophyteBlock</code> <code>MacrophyteBlock()</code> <code>aed_bivalve</code> <code>BivalveBlock</code> <code>BivalveBlock()</code> <code>aed_totals</code> <code>TotalsBlock</code> <code>TotalsBlock()</code>"},{"location":"nml/#glmpy.nml.aed_nml.AEDNML.from_dict","title":"<code>from_dict(nml_dict)</code>  <code>classmethod</code>","text":"<p>Initialise class instance from a dictionary.</p> <p>Returns an instance of the class that has been initialised with a nested dictionary of NML parameters.</p> <p>Parameters:</p> Name Type Description Default <code>nml_dict</code> <code>dict</code> <p>A dictionary where the keys are the block names and the values are dictionaries of parameter names (keys) and parameter values (values).</p> required"},{"location":"nml/#glmpy.nml.aed_nml.AEDNML.from_file","title":"<code>from_file(nml_path)</code>  <code>classmethod</code>","text":"<p>Initialise class instance from a NML file.</p> <p>Returns an instance of the class that has been initialised with parameters from a NML file.</p> <p>Parameters:</p> Name Type Description Default <code>nml_path</code> <code>dict</code> <p>Path to the NML file.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.AEDNML.get_block","title":"<code>get_block(block_name)</code>","text":"<p>Get a NML Block.</p> <p>Returns an instance of a <code>NMLBlock</code> subclass from the NML.</p> <p>Parameters:</p> Name Type Description Default <code>block_name</code> <code>str</code> <p>The block name.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.AEDNML.get_block_names","title":"<code>get_block_names()</code>","text":"<p>List the block names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLBlock</code> subclass instances.</p>"},{"location":"nml/#glmpy.nml.aed_nml.AEDNML.get_param_names","title":"<code>get_param_names(block_name)</code>","text":"<p>List the parameter names in a block.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p> <p>Parameters:</p> Name Type Description Default <code>block_name</code> <code>str</code> <p>The block name.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.AEDNML.get_param_units","title":"<code>get_param_units(block_name, param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>block_name</code> <code>str</code> <p>The block name.</p> required <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.AEDNML.get_param_value","title":"<code>get_param_value(block_name, param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>block_name</code> <code>str</code> <p>The block name.</p> required <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.AEDNML.init_blocks","title":"<code>init_blocks(*args)</code>","text":"<p>Populate the <code>blocks</code> dictionary with instances of <code>NMLBlock</code> subclasses.</p>"},{"location":"nml/#glmpy.nml.aed_nml.AEDNML.is_none_nml","title":"<code>is_none_nml()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>is_none_block()</code> is <code>True</code> for all subclassed <code>NMLBlock</code> instances in the <code>blocks</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.aed_nml.AEDNML.iter_blocks","title":"<code>iter_blocks()</code>","text":"<p>Iterate over all <code>NMLBlock</code> objects.</p>"},{"location":"nml/#glmpy.nml.aed_nml.AEDNML.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.aed_nml.AEDNML.set_block","title":"<code>set_block(block_name, block)</code>","text":"<p>Set a NML Block.</p> <p>Overrides, or adds a new block, to a NML.</p> <p>Parameters:</p> Name Type Description Default <code>block_name</code> <code>str</code> <p>The block name.</p> required <code>block</code> <code>NMLBlock</code> <p>The block to set.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.AEDNML.set_param_value","title":"<code>set_param_value(block_name, param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>block_name</code> <code>str</code> <p>The block name.</p> required <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.AEDNML.to_dict","title":"<code>to_dict(none_blocks=True, none_params=True)</code>","text":"<p>Nested dictionary of parameters.</p> <p>Returns a nested dictionary where the keys are the block names and the values a dictionary of parameter values.</p> <p>Parameters:</p> Name Type Description Default <code>none_blocks</code> <code>bool</code> <p>Whether to include blocks where all parameter values are <code>None</code>.</p> <code>True</code> <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.aed_nml.AEDNML.to_nml","title":"<code>to_nml(nml_path='glm3.nml')</code>","text":"<p>Write a NML file.</p> <p>Parameters with values of <code>None</code> are omitted.</p> <p>Parameters:</p> Name Type Description Default <code>nml_path</code> <code>str</code> <p>Path to the NML file</p> <code>'glm3.nml'</code>"},{"location":"nml/#glmpy.nml.aed_nml.BivalveBlock","title":"<code>BivalveBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>aed_bivalve</code> block.</p> <p>A model of one or more groups of benthic filter feeders, able to assimilate C, N and P and recycle filter material back to the water column and sediment.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.aed_nml.BivalveBlock.__init__","title":"<code>__init__(num_biv=None, the_biv=None, dbase=None, x_c=None, n_zones=None, active_zones=None, initfromdensity=None, simbivtracer=None, simbivfeedback=None, simstaticbiomass=None, bt_renewal=None, dn_target_variable=None, pn_target_variable=None, dp_target_variable=None, pp_target_variable=None, dc_target_variable=None, pc_target_variable=None, do_uptake_variable=None, ss_uptake_variable=None, simfixedenv=None, fixed_temp=None, fixed_oxy=None, fixed_food=None, extra_diag=None, diag_level=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>num_biv</code> <code>Union[int, None]</code> <p>Number of zooplankton groups.</p> <code>None</code> <code>the_biv</code> <code>Union[List[int], int, None]</code> <p>List of IDs of groups in <code>aed_bivalve_pars</code> dbase (length equals <code>num_biv</code>).</p> <code>None</code> <code>dbase</code> <code>Union[str, None]</code> <p><code>aed_bivalve_pars</code> path.</p> <code>None</code> <code>x_c</code> <code>Union[float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>n_zones</code> <code>Union[int, None]</code> <p>Number of sediment zones where bivalves will be active.</p> <code>None</code> <code>active_zones</code> <code>Union[List[int], int, None]</code> <p>The vector of sediment zones to include.</p> <code>None</code> <code>initfromdensity</code> <code>Union[bool, None]</code> <p>Undocumented parameter,</p> <code>None</code> <code>simbivtracer</code> <code>Union[bool, None]</code> <p>Opton to include water column tracer tracking filtration amount.</p> <code>None</code> <code>simbivfeedback</code> <code>Union[bool, None]</code> <p>Switch to enable/disable feedbacks between bivalve metabolism and water column variable concentration.</p> <code>None</code> <code>simstaticbiomass</code> <code>Union[bool, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>bt_renewal</code> <code>Union[float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>dn_target_variable</code> <code>Union[str, None]</code> <p>Water column variable to receive DON excretion.</p> <code>None</code> <code>pn_target_variable</code> <code>Union[str, None]</code> <p>Water column variable to receive PON egestion/mortality.</p> <code>None</code> <code>dp_target_variable</code> <code>Union[str, None]</code> <p>Water column variable to receive DOP excretion.</p> <code>None</code> <code>pp_target_variable</code> <code>Union[str, None]</code> <p>Water column variable to receive POP egestion/mortality.</p> <code>None</code> <code>dc_target_variable</code> <code>Union[str, None]</code> <p>Water column variable to receive DOC excretion.</p> <code>None</code> <code>pc_target_variable</code> <code>Union[str, None]</code> <p>Water column variable to receive POC egestion/mortality.</p> <code>None</code> <code>do_uptake_variable</code> <code>Union[str, None]</code> <p>Water column variable providing DO concentration.</p> <code>None</code> <code>ss_uptake_variable</code> <code>Union[str, None]</code> <p>Water column variable providing SS concentration.</p> <code>None</code> <code>simfixedenv</code> <code>Union[bool, None]</code> <p>Switch to enable/disable environmental variables to be fixed (for testing).</p> <code>None</code> <code>fixed_temp</code> <code>Union[float, None]</code> <p>Fixed temperature.</p> <code>None</code> <code>fixed_oxy</code> <code>Union[float, None]</code> <p>Fixed oxygen concentration.</p> <code>None</code> <code>fixed_food</code> <code>Union[float, None]</code> <p>Fixed food concentration.</p> <code>None</code> <code>extra_diag</code> <code>Union[bool, None]</code> <p>Switch to enable/disable extra diagnostics to be output.</p> <code>None</code> <code>diag_level</code> <code>Union[int, None]</code> <p>Undocumented parameter.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.aed_nml.BivalveBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.aed_nml.BivalveBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.BivalveBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.BivalveBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.aed_nml.BivalveBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.aed_nml.BivalveBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.aed_nml.BivalveBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.BivalveBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.aed_nml.CarbonBlock","title":"<code>CarbonBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>aed_carbon</code> block.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.aed_nml.CarbonBlock.__init__","title":"<code>__init__(dic_initial=None, ph_initial=None, ch4_initial=None, co2_model=None, alk_mode=None, ionic=None, atm_co2=None, atm_ch4=None, co2_piston_model=None, ch4_piston_model=None, rch4ox=None, kch4ox=None, vtch4ox=None, methane_reactant_variable=None, fsed_dic=None, ksed_dic=None, theta_sed_dic=None, fsed_dic_variable=None, fsed_ch4=None, ksed_ch4=None, theta_sed_ch4=None, fsed_ch4_variable=None, ebb_model=None, fsed_ebb_variable=None, fsed_ch4_ebb=None, ch4_bub_all=None, ch4_bub_cll=None, ch4_bub_kll=None, ch4_bub_disf1=None, ch4_bub_disf2=None, ch4_bub_disdp=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>dic_initial</code> <code>Union[float, None]</code> <p>Initial DIC cooncentrations.</p> <code>None</code> <code>ph_initial</code> <code>Union[float, None]</code> <p>Initial pH values.</p> <code>None</code> <code>ch4_initial</code> <code>Union[float, None]</code> <p>Initial CH4 values.</p> <code>None</code> <code>co2_model</code> <code>Union[int, None]</code> <p>Selection of pCO2 model algorithms. <code>0</code> for aed_geochem, <code>1</code> for CO2SYS, and <code>2</code> for Butler.</p> <code>None</code> <code>alk_mode</code> <code>Union[int, None]</code> <p>Selection of total alkalinity model algorithms.</p> <code>None</code> <code>ionic</code> <code>Union[float, None]</code> <p>Average ionic strength of the water column.</p> <code>None</code> <code>atm_co2</code> <code>Union[float, None]</code> <p>Atmospheric CO2 concentration.</p> <code>None</code> <code>atm_ch4</code> <code>Union[float, None]</code> <p>Atmospheric CH4 concentration.</p> <code>None</code> <code>co2_piston_model</code> <code>Union[int, None]</code> <p>Selection of air-water Co2 flux velocity method.</p> <code>None</code> <code>ch4_piston_model</code> <code>Union[int, None]</code> <p>Selection of air-water CH4 flux velocity method.</p> <code>None</code> <code>rch4ox</code> <code>Union[float, None]</code> <p>Maximum reaction rate of CH4 oxidation at 20C.</p> <code>None</code> <code>kch4ox</code> <code>Union[float, None]</code> <p>Half-saturation oxygen concentration for CH4 oxidation.</p> <code>None</code> <code>vtch4ox</code> <code>Union[float, None]</code> <p>Arrhenius temperature multiplier for CH4 oxidation.</p> <code>None</code> <code>methane_reactant_variable</code> <code>Union[str, None]</code> <p>State variable to be consumed during CH4 oxidation.</p> <code>None</code> <code>fsed_dic</code> <code>Union[float, None]</code> <p>Sediment CO2 flux.</p> <code>None</code> <code>ksed_dic</code> <code>Union[float, None]</code> <p>Half-saturation oxygen concentration controlling CO2 flux.</p> <code>None</code> <code>theta_sed_dic</code> <code>Union[float, None]</code> <p>Arrhenius temperature multiplier for sediment CO2 flux.</p> <code>None</code> <code>fsed_dic_variable</code> <code>Union[str, None]</code> <p>Variable name to link to for spatially resolved sediment zones.</p> <code>None</code> <code>fsed_ch4</code> <code>Union[float, None]</code> <p>Sediment CH4 flux.</p> <code>None</code> <code>ksed_ch4</code> <code>Union[float, None]</code> <p>Half-saturation oxygen concentration controlling CH4 flux.</p> <code>None</code> <code>theta_sed_ch4</code> <code>Union[float, None]</code> <p>Arrhenius temperature multiplier for sediment CH4 flux.</p> <code>None</code> <code>fsed_ch4_variable</code> <code>Union[str, None]</code> <p>Variable name to link to for spatially resolved sediment zone.</p> <code>None</code> <code>ebb_model</code> <code>Union[int, None]</code> <p>Option to activate CH4 ebullition. <code>0</code> for no ebullition, <code>1</code> for simple release model.</p> <code>None</code> <code>fsed_ebb_variable</code> <code>Union[str, None]</code> <p>Variable name to link to for spatially resolved sediment zones.</p> <code>None</code> <code>fsed_ch4_ebb</code> <code>Union[float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>ch4_bub_all</code> <code>Union[float, None]</code> <p>Mean water depth.</p> <code>None</code> <code>ch4_bub_cll</code> <code>Union[float, None]</code> <p>Normalising constant.</p> <code>None</code> <code>ch4_bub_kll</code> <code>Union[float, None]</code> <p>Exponential factor from the depth-ebullition regression relation.</p> <code>None</code> <code>ch4_bub_disf1</code> <code>Union[float, None]</code> <p>Bubble dissolution fraction (surface).</p> <code>None</code> <code>ch4_bub_disf1</code> <code>Union[float, None]</code> <p>Bubble dissolution fraction (deep).</p> <code>None</code> <code>ch4_bub_disdp</code> <code>Union[float, None]</code> <p>Bubble dissolution fraction depth interface.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.aed_nml.CarbonBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.aed_nml.CarbonBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.CarbonBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.CarbonBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.aed_nml.CarbonBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.aed_nml.CarbonBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.aed_nml.CarbonBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.CarbonBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.aed_nml.MacrophyteBlock","title":"<code>MacrophyteBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>aed_macrophyte</code> block.</p> <p>Simulates benthic habitat and/or growth of macrophytes such as seagrasses in specified sediment zones.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.aed_nml.MacrophyteBlock.__init__","title":"<code>__init__(num_mphy=None, the_mphy=None, n_zones=None, active_zones=None, simstaticbiomass=None, simmacfeedback=None, dbase=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>num_mphy</code> <code>Union[int, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>the_mphy</code> <code>Union[List[int], None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>n_zones</code> <code>Union[int, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>active_zones</code> <code>Union[List[int], None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>simstaticbiomass</code> <code>Union[bool, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>simmacfeedback</code> <code>Union[bool, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>dbase</code> <code>Union[str, None]</code> <p>Undocumented parameter.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.aed_nml.MacrophyteBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.aed_nml.MacrophyteBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.MacrophyteBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.MacrophyteBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.aed_nml.MacrophyteBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.aed_nml.MacrophyteBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.aed_nml.MacrophyteBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.MacrophyteBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.aed_nml.ModelsBlock","title":"<code>ModelsBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>aed_models</code> block.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.aed_nml.ModelsBlock.__init__","title":"<code>__init__(models=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>models</code> <code>Union[List[str], None]</code> <p>The AED modules to use.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.aed_nml.ModelsBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.aed_nml.ModelsBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.ModelsBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.ModelsBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.aed_nml.ModelsBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.aed_nml.ModelsBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.aed_nml.ModelsBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.ModelsBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.aed_nml.NitrogenBlock","title":"<code>NitrogenBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>aed_nitrogen</code> block.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.aed_nml.NitrogenBlock.__init__","title":"<code>__init__(amm_initial=None, nit_initial=None, n2o_initial=None, no2_initial=None, rnitrif=None, knitrif=None, theta_nitrif=None, nitrif_reactant_variable=None, nitrif_ph_variable=None, simnitrfph=None, rnh4o2=None, rno2o2=None, simn2o=None, rn2o=None, kpart_ammox=None, kin_deamm=None, atm_n2o=None, n2o_piston_model=None, rnh4no2=None, kanammox=None, kanmx_nit=None, kanmx_amm=None, rdenit=None, kdenit=None, theta_denit=None, rdnra=None, kdnra_oxy=None, simdrydeposition=None, atm_din_dd=None, simwetdeposition=None, atm_din_conc=None, ksed_amm=None, ksed_nit=None, fsed_n2o=None, ksed_n2o=None, theta_sed_amm=None, theta_sed_nit=None, fsed_amm=None, fsed_nit=None, fsed_amm_variable=None, fsed_nit_variable=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>amm_initial</code> <code>Union[float, None]</code> <p>Initial CH4 concentrations.</p> <code>None</code> <code>nit_initial</code> <code>Union[float, None]</code> <p>Initial NO3 concentrations.</p> <code>None</code> <code>n2o_initial</code> <code>Union[float, None]</code> <p>Initial N2O concentrations.</p> <code>None</code> <code>no2_initial</code> <code>Union[float, None]</code> <p>Initial NO2 concentrations.</p> <code>None</code> <code>rnitrif</code> <code>Union[float, None]</code> <p>Maximum reaction rate of nitrification at 20C.</p> <code>None</code> <code>knitrif</code> <code>Union[float, None]</code> <p>Half-saturation oxygen concentration for nitrification.</p> <code>None</code> <code>theta_nitrif</code> <code>Union[float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>nitrif_reactant_variable</code> <code>Union[str, None]</code> <p>State variable to be consumed during nitrifition.</p> <code>None</code> <code>nitrif_ph_variable</code> <code>Union[str, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>simnitrfph</code> <code>Union[bool, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>rnh4o2</code> <code>Union[float, None]</code> <p>Kinetic rate constant for nitratation.</p> <code>None</code> <code>rno2o2</code> <code>Union[float, None]</code> <p>Kinetic rate constant for nitratation.</p> <code>None</code> <code>simn2o</code> <code>Union[int, None]</code> <p>Switch to use simple or advanced N reactions.</p> <code>None</code> <code>rn2o</code> <code>Union[float, None]</code> <p>Kinetic rate constant for N2O consumption</p> <code>None</code> <code>kpart_ammox</code> <code>Union[float, None]</code> <p>Partitioning parameter for the products of ammonium oxidation, based on O2 concentration.</p> <code>None</code> <code>kin_deamm</code> <code>Union[float, None]</code> <p>O2 concentration for inhibition of deammonification.</p> <code>None</code> <code>atm_n2o</code> <code>Union[float, None]</code> <p>Atmospheric N2O concentration.</p> <code>None</code> <code>n2o_piston_model</code> <code>Union[int, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>rnh4no2</code> <code>Union[float, None]</code> <p>Kinetic rate constant for deammonification.</p> <code>None</code> <code>kanammox</code> <code>Union[float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>kanmx_nit</code> <code>Union[float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>kanmx_amm</code> <code>Union[float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>rdenit</code> <code>Union[float, None]</code> <p>Maximum reaction rate of denitrification at 20C.</p> <code>None</code> <code>kdenit</code> <code>Union[float, None]</code> <p>Half-saturation oxygen concentration for denitrification.</p> <code>None</code> <code>theta_denit</code> <code>Union[float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>rdnra</code> <code>Union[float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>kdnra_oxy</code> <code>Union[float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>simdrydeposition</code> <code>Union[bool, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>atm_din_dd</code> <code>Union[float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>simwetdeposition</code> <code>Union[bool, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>atm_din_conc</code> <code>Union[float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>ksed_amm</code> <code>Union[float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>ksed_nit</code> <code>Union[float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>fsed_n2o</code> <code>Union[float, None]</code> <p>Maximum N2O sediment flux rate.</p> <code>None</code> <code>ksed_n2o</code> <code>Union[float, None]</code> <p>O2 inhibition concentration parameter.</p> <code>None</code> <code>theta_sed_amm</code> <code>Union[float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>theta_sed_nit</code> <code>Union[float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>fsed_amm</code> <code>Union[float, None]</code> <p>Sediment NH4 flux.</p> <code>None</code> <code>fsed_nit</code> <code>Union[float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>fsed_amm_variable</code> <code>Union[str, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>fsed_nit_variable</code> <code>Union[str, None]</code> <code>None</code>"},{"location":"nml/#glmpy.nml.aed_nml.NitrogenBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.aed_nml.NitrogenBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.NitrogenBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.NitrogenBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.aed_nml.NitrogenBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.aed_nml.NitrogenBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.aed_nml.NitrogenBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.NitrogenBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.aed_nml.NonCohesiveBlock","title":"<code>NonCohesiveBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>aed_noncohesive</code> block.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.aed_nml.NonCohesiveBlock.__init__","title":"<code>__init__(num_ss=None, ss_initial=None, ke_ss=None, settling=None, w_ss=None, d_ss=None, rho_ss=None, resuspension=None, epsilon=None, tau_0=None, tau_r=None, ktau_0=None, macrophyte_link_var=None, simsedimentmass=None, fs=None, sed_porosity=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>num_ss</code> <code>Union[int, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>ss_initial</code> <code>Union[List[int], None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>ke_ss</code> <code>Union[List[float], None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>settling</code> <code>Union[int, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>w_ss</code> <code>Union[List[float], None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>d_ss</code> <code>Union[List[float], None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>rho_ss</code> <code>Union[List[float], None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>resuspension</code> <code>Union[int, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>epsilon</code> <code>Union[float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>tau_0</code> <code>Union[List[float], None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>tau_r</code> <code>Union[float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>ktau_0</code> <code>Union[float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>macrophyte_link_var</code> <code>Union[str, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>simsedimentmass</code> <code>Union[bool, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>fs</code> <code>Union[List[float], None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>sed_porosity</code> <code>Union[float, None]</code> <p>Undocumented parameter.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.aed_nml.NonCohesiveBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.aed_nml.NonCohesiveBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.NonCohesiveBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.NonCohesiveBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.aed_nml.NonCohesiveBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.aed_nml.NonCohesiveBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.aed_nml.NonCohesiveBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.NonCohesiveBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.aed_nml.OrganicMatterBlock","title":"<code>OrganicMatterBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>aed_organic_matter</code> block.</p> <p>Organic matter variables cover the C, N &amp; P stored in the dissolved and particulate organic matter pools. This module optionally also supports depiction of \u201clabile\u201d vs \u201crefractory\u201d fractions of organic matter, including the breakdown and hydrolysis process, photo-degradation and mineralisation.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.aed_nml.OrganicMatterBlock.__init__","title":"<code>__init__(poc_initial=None, doc_initial=None, pon_initial=None, don_initial=None, pop_initial=None, dop_initial=None, docr_initial=None, donr_initial=None, dopr_initial=None, cpom_initial=None, rdom_minerl=None, rdoc_minerl=None, rdon_minerl=None, rdop_minerl=None, rpoc_hydrol=None, rpon_hydrol=None, rpop_hydrol=None, theta_hydrol=None, theta_minerl=None, kpom_hydrol=None, kdom_minerl=None, simdenitrification=None, dom_miner_oxy_reactant_var=None, dom_miner_nit_reactant_var=None, dom_miner_no2_reactant_var=None, dom_miner_n2o_reactant_var=None, dom_miner_fe3_reactant_var=None, dom_miner_so4_reactant_var=None, dom_miner_ch4_reactant_var=None, doc_miner_product_variable=None, don_miner_product_variable=None, dop_miner_product_variable=None, f_an=None, k_nit=None, simrpools=None, rdomr_minerl=None, rcpom_bdown=None, x_cpom_n=None, x_cpom_p=None, kedom=None, kepom=None, kedomr=None, kecpom=None, simphotolysis=None, photo_c=None, settling=None, w_pom=None, d_pom=None, rho_pom=None, w_cpom=None, d_cpom=None, rho_cpom=None, resuspension=None, resus_link=None, sedimentomfrac=None, xsc=None, xsn=None, xsp=None, fsed_doc=None, fsed_don=None, fsed_dop=None, ksed_dom=None, theta_sed_dom=None, fsed_doc_variable=None, fsed_don_variable=None, fsed_dop_variable=None, diag_level=None, extra_diag=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>poc_initial</code> <code>Union[float, None]</code> <p>Initial POC concentration.</p> <code>None</code> <code>doc_initial</code> <code>Union[float, None]</code> <p>Initial DOC concentration.</p> <code>None</code> <code>pon_initial</code> <code>Union[float, None]</code> <p>Initial PON concentration.</p> <code>None</code> <code>don_initial</code> <code>Union[float, None]</code> <p>Initial DON concentration.</p> <code>None</code> <code>pop_initial</code> <code>Union[float, None]</code> <p>Initial POP concentration.</p> <code>None</code> <code>dop_initial</code> <code>Union[float, None]</code> <p>Initial DOP concentration.</p> <code>None</code> <code>docr_initial</code> <code>Union[float, None]</code> <p>Initial DOCR concentration. Required if <code>simrpools</code> is <code>True</code>.</p> <code>None</code> <code>donr_initial</code> <code>Union[float, None]</code> <p>Initial DONR concentration. Required if <code>simrpools</code> is <code>True</code>.</p> <code>None</code> <code>dopr_initial</code> <code>Union[float, None]</code> <p>Initial DOPR concentration. Required if <code>simrpools</code> is <code>True</code>.</p> <code>None</code> <code>cpom_initial</code> <code>Union[float, None]</code> <p>Initial CPOM concentration. Required if <code>simrpools</code> is <code>True</code>.</p> <code>None</code> <code>rdom_minerl</code> <code>Union[float, None]</code> <p>Reference DOM mineralisation rate at 20C.</p> <code>None</code> <code>rdoc_minerl</code> <code>Union[float, None]</code> <p>Reference DOC mineralisation rate at 20C.</p> <code>None</code> <code>rdon_minerl</code> <code>Union[float, None]</code> <p>Reference DON mineralisation rate at 20C.</p> <code>None</code> <code>rdop_minerl</code> <code>Union[float, None]</code> <p>Reference DOP mineralisation rate at 20C.</p> <code>None</code> <code>rpoc_hydrol</code> <code>Union[float, None]</code> <p>Reference POC hydrolysis/breakdown rate at 20C.</p> <code>None</code> <code>rpon_hydrol</code> <code>Union[float, None]</code> <p>Reference PON hydrolysis/breakdown rate at 20C.</p> <code>None</code> <code>rpop_hydrol</code> <code>Union[float, None]</code> <p>Reference POP hydrolysis/breakdown rate at 20C.</p> <code>None</code> <code>theta_hydrol</code> <code>Union[float, None]</code> <p>Arrhenius temperature scaling coefficient for POC hydrolysis.</p> <code>None</code> <code>theta_minerl</code> <code>Union[float, None]</code> <p>Arrhenius temperature scaling coefficient for DOM mineralisation.</p> <code>None</code> <code>kpom_hydrol</code> <code>Union[float, None]</code> <p>Half-saturation O2 concentration for POM hydrolysis.</p> <code>None</code> <code>kdom_minerl</code> <code>Union[float, None]</code> <p>Half-saturation O2 concentration for DOM hydrolysis.</p> <code>None</code> <code>simdenitrification</code> <code>Union[int, None]</code> <p>Option to select denitrification sub-model.</p> <code>None</code> <code>dom_miner_oxy_reactant_var</code> <code>Union[str, None]</code> <p>State variable used to control aerobic mineralisation.</p> <code>None</code> <code>dom_miner_nit_reactant_var</code> <code>Union[str, None]</code> <p>State variable used to control nitrate reduction.</p> <code>None</code> <code>dom_miner_no2_reactant_var</code> <code>Union[str, None]</code> <p>State variable used to control nitrite reduction.</p> <code>None</code> <code>dom_miner_n2o_reactant_var</code> <code>Union[str, None]</code> <p>State variable used to control N2O reduction.</p> <code>None</code> <code>dom_miner_fe3_reactant_var</code> <code>Union[str, None]</code> <p>State variable used to control iron reduction.</p> <code>None</code> <code>dom_miner_so4_reactant_var</code> <code>Union[str, None]</code> <p>State variable used to control sulfate reduction.</p> <code>None</code> <code>dom_miner_ch4_reactant_var</code> <code>Union[str, None]</code> <p>State variable to receive methan.</p> <code>None</code> <code>doc_miner_product_variable</code> <code>Union[str, None]</code> <p>State variable to receive DIC.</p> <code>None</code> <code>don_miner_product_variable</code> <code>Union[str, None]</code> <p>State variable to receive NH4.</p> <code>None</code> <code>dop_miner_product_variable</code> <code>Union[str, None]</code> <p>State variable to receive PO4.</p> <code>None</code> <code>f_an</code> <code>Union[float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>k_nit</code> <code>Union[float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>simrpools</code> <code>Union[bool, None]</code> <p>Option to include refractory OM pools, including DOM_{R} and CPOM.</p> <code>None</code> <code>rdomr_minerl</code> <code>Union[float, None]</code> <p>Reference DOM_{R} mineralisation rate at 20C.</p> <code>None</code> <code>rcpom_bdown</code> <code>Union[float, None]</code> <p>Reference CPOM hydrolysis/breakdown rate at 20C.</p> <code>None</code> <code>x_cpom_n</code> <code>Union[float, None]</code> <p>CPOM nitrogen stoichiometry.</p> <code>None</code> <code>x_cpom_p</code> <code>Union[float, None]</code> <p>CPOM phosphorus  stoichiometry.</p> <code>None</code> <code>kedom</code> <code>Union[float, None]</code> <p>Specific light attenuation coefficient for DOM.</p> <code>None</code> <code>kepom</code> <code>Union[float, None]</code> <p>Specific light attenuation coefficient for POM.</p> <code>None</code> <code>kedomr</code> <code>Union[float, None]</code> <p>Specific light attenuation coefficient for DOM_{R}.</p> <code>None</code> <code>kecpom</code> <code>Union[float, None]</code> <p>Specific light attenuation coefficient for CPOM.</p> <code>None</code> <code>simphotolysis</code> <code>Union[bool, None]</code> <p>Option to include photo-mineralisation of DOM_{R}.</p> <code>None</code> <code>photo_c</code> <code>Union[float, None]</code> <p>Photolysis constant.</p> <code>None</code> <code>settling</code> <code>Union[int, None]</code> <p>Option to set the method of settling for POM and CPOM.</p> <code>None</code> <code>w_pom</code> <code>Union[float, None]</code> <p>Sedimentation velocity of POM detrital particles. Used if <code>settling</code> is <code>1</code> or <code>2</code>.</p> <code>None</code> <code>d_pom</code> <code>Union[float, None]</code> <p>Diameter of POM detrital particles. Used if <code>settling</code> is <code>3</code>.</p> <code>None</code> <code>rho_pom</code> <code>Union[float, None]</code> <p>Density of POM detrital particles. Used if <code>settling</code> is <code>3</code>.</p> <code>None</code> <code>w_cpom</code> <code>Union[float, None]</code> <p>Sedimentation velocity of CPOM particles. Used if <code>settling</code> is <code>1</code> or <code>2</code>.</p> <code>None</code> <code>d_cpom</code> <code>Union[float, None]</code> <p>Diameter of CPOM particles. Used if <code>settling</code> is <code>3</code>.</p> <code>None</code> <code>rho_cpom</code> <code>Union[float, None]</code> <p>Density of CPOM detrital particles. Used if <code>settling</code> is <code>3</code>.</p> <code>None</code> <code>resuspension</code> <code>Union[int, None]</code> <p>Option to set the method of resuspension for POM and CPOM.</p> <code>None</code> <code>resus_link</code> <code>Union[str, None]</code> <p>Diagnostic variable to link to for resuspension rate.</p> <code>None</code> <code>sedimentomfrac</code> <code>Union[float, None]</code> <p>Fraction by weight of surficial sediment organic matter.</p> <code>None</code> <code>xsc</code> <code>Union[float, None]</code> <p>Stoichiometry of sedment particulate carbon.</p> <code>None</code> <code>xsn</code> <code>Union[float, None]</code> <p>Stoichiometry of sedment particulate nitrogen.</p> <code>None</code> <code>xsp</code> <code>Union[float, None]</code> <p>Stoichiometry of sedment particulate phosphorus.</p> <code>None</code> <code>fsed_doc</code> <code>Union[float, None]</code> <p>Reference sediment DOC flux at 20C.</p> <code>None</code> <code>fsed_don</code> <code>Union[float, None]</code> <p>Reference sediment DON flux at 20C.</p> <code>None</code> <code>fsed_dop</code> <code>Union[float, None]</code> <p>Reference sediment DOP flux at 20C.</p> <code>None</code> <code>ksed_dom</code> <code>Union[float, None]</code> <p>Half-saturation oxygen concentraion controlling DOM sediment flux.</p> <code>None</code> <code>theta_sed_dom</code> <code>Union[float, None]</code> <p>Arrhenius temperature multiplier for sediment DOM flux.</p> <code>None</code> <code>fsed_doc_variable</code> <code>Union[str, None]</code> <p>Variable name to link to for spatially resolved sediment zones.</p> <code>None</code> <code>fsed_don_variable</code> <code>Union[str, None]</code> <p>Variable name to link to for spatially resolved sediment zones.</p> <code>None</code> <code>fsed_dop_variable</code> <code>Union[str, None]</code> <p>Variable name to link to for spatially resolved sediment zones.</p> <code>None</code> <code>diag_level</code> <code>Union[int, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>extra_diag</code> <code>Union[bool, None]</code> <p>Undocumented parameter.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.aed_nml.OrganicMatterBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.aed_nml.OrganicMatterBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.OrganicMatterBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.OrganicMatterBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.aed_nml.OrganicMatterBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.aed_nml.OrganicMatterBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.aed_nml.OrganicMatterBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.OrganicMatterBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.aed_nml.OxygenBlock","title":"<code>OxygenBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>aed_oxygen</code> block.</p> <p>Dissolved oxygen (DO) dynamics are able to be simulated, accounting for atmospheric exchange and sediment oxygen demand, and through links to other modules will account for microbial use during organic matter mineralisation and nitrification, photosynthetic oxygen production and respiratory oxygen consumption, and respiration by other optional biotic components</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.aed_nml.OxygenBlock.__init__","title":"<code>__init__(oxy_initial=None, oxy_min=None, oxy_max=None, fsed_oxy=None, ksed_oxy=None, theta_sed_oxy=None, fsed_oxy_variable=None, oxy_piston_model=None, altitude=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>oxy_initial</code> <code>Union[float, None]</code> <p>Initial O2 concentration.</p> <code>None</code> <code>oxy_min</code> <code>Union[float, None]</code> <p>Minimum O2 concentration.</p> <code>None</code> <code>oxy_max</code> <code>Union[float, None]</code> <p>Maximum O2 concentration.</p> <code>None</code> <code>fsed_oxy</code> <code>Union[float, None]</code> <p>Sediment O2 flux at 20C.</p> <code>None</code> <code>ksed_oxy</code> <code>Union[float, None]</code> <p>Arrhenius temperature multiplier for sediment O2 flux.</p> <code>None</code> <code>fsed_oxy_variable</code> <code>Union[str, None]</code> <p>Variable name to link to for spatially resolved sediment zones.</p> <code>None</code> <code>oxy_piston_model</code> <code>Union[int, None]</code> <p>Selection of air/water O2 flux velocity method.</p> <code>None</code> <code>altitude</code> <code>Union[float, None]</code> <p>Altitude of site above sea level.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.aed_nml.OxygenBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.aed_nml.OxygenBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.OxygenBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.OxygenBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.aed_nml.OxygenBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.aed_nml.OxygenBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.aed_nml.OxygenBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.OxygenBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.aed_nml.PhosphorusBlock","title":"<code>PhosphorusBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>aed_phosphorus</code> block.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.aed_nml.PhosphorusBlock.__init__","title":"<code>__init__(frp_initial=None, frp_min=None, frp_max=None, fsed_frp=None, ksed_frp=None, theta_sed_frp=None, phosphorus_reactant_variable=None, fsed_frp_variable=None, simpo4adsorption=None, ads_use_external_tss=None, po4sorption_target_variable=None, po4adsorptionmodel=None, kpo4p=None, kadsratio=None, qmax=None, w_po4ads=None, ads_use_ph=None, ph_variable=None, simdrydeposition=None, atm_pip_dd=None, simwetdeposition=None, atm_frp_conc=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>frp_initial</code> <code>Union[float, None]</code> <p>Initial PO4 concentration.</p> <code>None</code> <code>frp_min</code> <code>Union[float, None]</code> <p>Minimum PO4 concentration.</p> <code>None</code> <code>frp_max</code> <code>Union[float, None]</code> <p>Maximum PO4 concentration.</p> <code>None</code> <code>fsed_frp</code> <code>Union[float, None]</code> <p>Sediment PO4 flux at 20C.</p> <code>None</code> <code>ksed_frp</code> <code>Union[float, None]</code> <p>Half-saturation oxygen concentration controlling O2 flux.</p> <code>None</code> <code>theta_sed_frp</code> <code>Union[float, None]</code> <p>Arrhenius temperature multiplier for sediment O2 flux.</p> <code>None</code> <code>phosphorus_reactant_variable</code> <code>Union[str, None]</code> <p>State variable used to control PO4 sediment release.</p> <code>None</code> <code>fsed_frp_variable</code> <code>Union[str, None]</code> <p>Variable name to link to for spatially resolved sediment zones.</p> <code>None</code> <code>simpo4adsorption</code> <code>Union[bool, None]</code> <p>Option to allow include absorption.</p> <code>None</code> <code>ads_use_external_tss</code> <code>Union[bool, None]</code> <p>Option to use externally simulated TSS concentration as sorbent.</p> <code>None</code> <code>po4sorption_target_variable</code> <code>Union[str, None]</code> <p>Variable name to link to for PO4 sorbent.</p> <code>None</code> <code>po4adsorptionmodel</code> <code>Union[int, None]</code> <p>Selection of PO4 sorption method. <code>1</code> for Ji (2008), <code>2</code> for Choa et al (2010).</p> <code>None</code> <code>kpo4p</code> <code>Union[float, None]</code> <p>Sorption partitioning coefficient.</p> <code>None</code> <code>kadsratio</code> <code>Union[float, None]</code> <p>Ratio of adsorption and desorp-tion rate coefficients (for <code>po4adsorptionmodel</code> equals <code>2</code>).</p> <code>None</code> <code>qmax</code> <code>Union[float, None]</code> <p>Maximum adsorption capacity (for <code>po4adsorptionmodel</code> equals <code>2</code>).</p> <code>None</code> <code>w_po4ads</code> <code>Union[float, None]</code> <p>Sedimentation velocity of <code>PO_{4}^{ads}</code>.</p> <code>None</code> <code>ads_use_ph</code> <code>Union[bool, None]</code> <p>Option to include pH control on sorption coefficient. Function based on pH sorption control on Fe minerals.</p> <code>None</code> <code>ph_variable</code> <code>Union[str, None]</code> <p>Variable name to link to for pH to influence sorption.</p> <code>None</code> <code>simdrydeposition</code> <code>Union[bool, None]</code> <p>Option to include dry (particulate) deposition of P.</p> <code>None</code> <code>atm_pip_dd</code> <code>Union[float, None]</code> <p><code>PO_{4}^{ads}</code> deposition rate.</p> <code>None</code> <code>simwetdeposition</code> <code>Union[bool, None]</code> <p>Option to include wet deposition of P through rainfall.</p> <code>None</code> <code>atm_frp_conc</code> <code>Union[float, None]</code> <p>PO4 concentration in rainfall.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.aed_nml.PhosphorusBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.aed_nml.PhosphorusBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.PhosphorusBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.PhosphorusBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.aed_nml.PhosphorusBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.aed_nml.PhosphorusBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.aed_nml.PhosphorusBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.PhosphorusBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.aed_nml.PhytoplanktonBlock","title":"<code>PhytoplanktonBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>aed_phytoplankton</code> block.</p> <p>Highly customisable phytoplankton module for simulating change in algae, cyano-bacteria and chl-a, including phytoplankton production/respiration, nutrient uptake, excretion, vertical movement (eg buoyancy control), and grazing effects. Benthic phytoplankton may also be optionally configured.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.aed_nml.PhytoplanktonBlock.__init__","title":"<code>__init__(num_phytos=None, the_phytos=None, settling=None, do_mpb=None, r_mpbg=None, r_mpbr=None, i_kmpb=None, mpb_max=None, resuspension=None, n_zones=None, active_zones=None, resus_link=None, p_excretion_target_variable=None, n_excretion_target_variable=None, c_excretion_target_variable=None, si_excretion_target_variable=None, p_mortality_target_variable=None, n_mortality_target_variable=None, c_mortality_target_variable=None, si_mortality_target_variable=None, p1_uptake_target_variable=None, n1_uptake_target_variable=None, n2_uptake_target_variable=None, si_uptake_target_variable=None, do_uptake_target_variable=None, c_uptake_target_variable=None, dbase=None, min_rho=None, max_rho=None, diag_level=None, extra_diag=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>num_phytos</code> <code>Union[int, None]</code> <p>Number of phytoplankton groups/species.</p> <code>None</code> <code>the_phytos</code> <code>Union[List[int], int, None]</code> <p>Set of chosen group IDs within the database file.</p> <code>None</code> <code>settling</code> <code>Union[List[int], int, None]</code> <p>Option to set the method of settling for PHY group alpha.</p> <code>None</code> <code>do_mpb</code> <code>Union[int, None]</code> <p>Option to include MPB as a simulated benthic variable.</p> <code>None</code> <code>r_mpbg</code> <code>Union[float, None]</code> <p>Maximum growth rate of MPB.</p> <code>None</code> <code>r_mpbr</code> <code>Union[float, None]</code> <p>Dark respiration rate of MPB.</p> <code>None</code> <code>i_kmpb</code> <code>Union[float, None]</code> <p>Half saturation constant for light limitation of growth.</p> <code>None</code> <code>mpb_max</code> <code>Union[float, None]</code> <p>Maximum biomass density of MPB.</p> <code>None</code> <code>resuspension</code> <code>Union[float, None]</code> <p>Fraction to set the amount of resuspension for PHY group alpha.</p> <code>None</code> <code>n_zones</code> <code>Union[int, None]</code> <p>Number of benthic zones where MPB is active.</p> <code>None</code> <code>active_zones</code> <code>Union[int, None]</code> <p>Set of benthic zones with MPB active.</p> <code>None</code> <code>resus_link</code> <code>Union[str, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>p_excretion_target_variable</code> <code>Union[str, None]</code> <p>State variable to add DOP excretion.</p> <code>None</code> <code>n_excretion_target_variable</code> <code>Union[str, None]</code> <p>State variable to add DON excretion.</p> <code>None</code> <code>c_excretion_target_variable</code> <code>Union[str, None]</code> <p>State variable to add DOC excretion.</p> <code>None</code> <code>si_excretion_target_variable</code> <code>Union[str, None]</code> <p>State variable to add Si excretion.</p> <code>None</code> <code>p_mortality_target_variable</code> <code>Union[str, None]</code> <p>State variable to add POP mortality</p> <code>None</code> <code>n_mortality_target_variable</code> <code>Union[str, None]</code> <p>State variable to add PON mortality.</p> <code>None</code> <code>c_mortality_target_variable</code> <code>Union[str, None]</code> <p>State variable to add POC mortality.</p> <code>None</code> <code>si_mortality_target_variable</code> <code>Union[str, None]</code> <p>State variable to add Si mortality.</p> <code>None</code> <code>p1_uptake_target_variable</code> <code>Union[str, None]</code> <p>State variable to provide FRP for growth.</p> <code>None</code> <code>n1_uptake_target_variable</code> <code>Union[str, None]</code> <p>State variable to provide NO3 for growth.</p> <code>None</code> <code>n2_uptake_target_variable</code> <code>Union[str, None]</code> <p>State variable to provide NH4 for growth.</p> <code>None</code> <code>si_uptake_target_variable</code> <code>Union[str, None]</code> <p>State variable to provide Si for growth.</p> <code>None</code> <code>do_uptake_target_variable</code> <code>Union[str, None]</code> <p>State variable to incremen during growth.</p> <code>None</code> <code>c_uptake_target_variable</code> <code>Union[str, None]</code> <p>State variable to provide DIC during growth.</p> <code>None</code> <code>dbase</code> <code>Union[str, None]</code> <p>Phytoplankton parameter database file.</p> <code>None</code> <code>min_rho</code> <code>Union[float, None]</code> <p>Minimum cellular density. Used if <code>settling</code> is <code>3</code>.</p> <code>None</code> <code>max_rho</code> <code>Union[float, None]</code> <p>Maximum cellular density.  Used if <code>settling</code> is <code>3</code>.</p> <code>None</code> <code>diag_level</code> <code>Union[int, None]</code> <p>Extent of diagnostic output.</p> <code>None</code> <code>extra_diag</code> <code>Union[bool, None]</code> <p>Undocumented parameter.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.aed_nml.PhytoplanktonBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.aed_nml.PhytoplanktonBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.PhytoplanktonBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.PhytoplanktonBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.aed_nml.PhytoplanktonBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.aed_nml.PhytoplanktonBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.aed_nml.PhytoplanktonBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.PhytoplanktonBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.aed_nml.SedConst2DBlock","title":"<code>SedConst2DBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>aed_sed_const2d</code> block.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.aed_nml.SedConst2DBlock.__init__","title":"<code>__init__(n_zones=None, active_zones=None, fsed_oxy=None, fsed_rsi=None, fsed_amm=None, fsed_nit=None, fsed_frp=None, fsed_pon=None, fsed_don=None, fsed_pop=None, fsed_dop=None, fsed_poc=None, fsed_doc=None, fsed_dic=None, fsed_ch4=None, fsed_feii=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>n_zones</code> <code>Union[int, None]</code> <p>Number of zones.</p> <code>None</code> <code>active_zones</code> <code>Union[int, None].</code> <p>The zones to activate.</p> <code>None</code> <code>fsed_oxy</code> <code>Union[List[float], None]</code> <p>Sedimentation flux for oxygen.</p> <code>None</code> <code>fsed_rsi</code> <code>Union[List[float], float, None]</code> <p>Sedimentation flux for silica.</p> <code>None</code> <code>fsed_amm</code> <code>Union[List[float], None]</code> <p>Sedimentation flux for ammonia.</p> <code>None</code> <code>fsed_nit</code> <code>Union[List[float], None]</code> <p>Sedimentation flux for nitrogen.</p> <code>None</code> <code>fsed_frp</code> <code>Union[List[float], None]</code> <p>Sedimentation flux for phosphorus.</p> <code>None</code> <code>fsed_pon</code> <code>Union[List[float], float, None]</code> <p>Sedimentation flux for particulate organic nitrogen.</p> <code>None</code> <code>fsed_don</code> <code>Union[List[float], float, None]</code> <p>Sedimentation flux for dissolved organic nitrogen.</p> <code>None</code> <code>fsed_pop</code> <code>Union[List[float], float, None]</code> <p>Sedimentation flux for particulate organic phosphorus.</p> <code>None</code> <code>fsed_dop</code> <code>Union[List[float], float, None]</code> <p>Sedimentation flux for dissolved organic phosphorus.</p> <code>None</code> <code>fsed_poc</code> <code>Union[List[float], float, None]</code> <p>Sedimentation flux for particulate organic carbon.</p> <code>None</code> <code>fsed_doc</code> <code>Union[List[float], float, None]</code> <p>Sedimentation flux for dissolved organic carbon.</p> <code>None</code> <code>fsed_dic</code> <code>Union[List[float], float, None]</code> <p>Sedimentation flux for dissolved inorganic carbon.</p> <code>None</code> <code>fsed_ch4</code> <code>Union[List[float], None]</code> <p>Sedimentation flux for methane.</p> <code>None</code> <code>fsed_feii</code> <code>Union[List[float], float, None]</code> <p>Sedimentation flux for iron.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.aed_nml.SedConst2DBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.aed_nml.SedConst2DBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.SedConst2DBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.SedConst2DBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.aed_nml.SedConst2DBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.aed_nml.SedConst2DBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.aed_nml.SedConst2DBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.SedConst2DBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.aed_nml.SedFluxBlock","title":"<code>SedFluxBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>aed_sedflux</code> block.</p> <p>An interface module designed to provide spatially variable sediment flux settings to key modules (e.g., OXY, OGM, NUT), and/or link these variables to the dynamic sediment biogeochemistry model (SDG).</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.aed_nml.SedFluxBlock.__init__","title":"<code>__init__(sedflux_model=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>sedflux_model</code> <code>Union[str, None]</code> <p>Controls the setup of zones and whether the flux is taken from a constant value or from CANDI-AED.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.aed_nml.SedFluxBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.aed_nml.SedFluxBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.SedFluxBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.SedFluxBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.aed_nml.SedFluxBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.aed_nml.SedFluxBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.aed_nml.SedFluxBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.SedFluxBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.aed_nml.SilicaBlock","title":"<code>SilicaBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>aed_silica</code> block.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.aed_nml.SilicaBlock.__init__","title":"<code>__init__(rsi_initial=None, rsi_min=None, rsi_max=None, fsed_rsi=None, ksed_rsi=None, theta_sed_rsi=None, fsed_rsi_variable=None, silica_reactant_variable=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>rsi_initial</code> <code>Union[float, None]</code> <p>Initial RSi concentration.</p> <code>None</code> <code>rsi_min</code> <code>Union[float, None]</code> <p>Minimum RSi concentration.</p> <code>None</code> <code>rsi_max</code> <code>Union[float, None]</code> <p>Maximum RSi concentration.</p> <code>None</code> <code>fsed_rsi</code> <code>Union[float, None]</code> <p>Reference sediment RSi flux at 20C.</p> <code>None</code> <code>ksed_rsi</code> <code>Union[float, None]</code> <p>Half-saturation oxygen concentration controlling Si flux.</p> <code>None</code> <code>theta_sed_rsi</code> <code>Union[float, None]</code> <p>Arrhenius temperature multiplier for sediment Si flux.</p> <code>None</code> <code>fsed_rsi_variable</code> <code>Union[str, None]</code> <p>Variable name to link to for spatially resolved sediment zones.</p> <code>None</code> <code>silica_reactant_variable</code> <code>Union[str, None]</code> <p>State variable used to control Si sediment release.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.aed_nml.SilicaBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.aed_nml.SilicaBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.SilicaBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.SilicaBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.aed_nml.SilicaBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.aed_nml.SilicaBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.aed_nml.SilicaBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.SilicaBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.aed_nml.TotalsBlock","title":"<code>TotalsBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>aed_totals</code> block.</p> <p><code>aed_totals</code> is a summary module, allowing users to \u201csum-up\u201d component variables from other modules into a total, for example, to compute TN, TP or TSS.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.aed_nml.TotalsBlock.__init__","title":"<code>__init__(outputlight=None, tn_vars=None, tn_varscale=None, tp_vars=None, tp_varscale=None, toc_vars=None, toc_varscale=None, tss_vars=None, tss_varscale=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>outputlight</code> <code>Union[bool, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>tn_vars</code> <code>Union[List[str], str, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>tn_varscale</code> <code>Union[List[float], float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>tp_vars</code> <code>Union[List[str], str, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>tp_varscale</code> <code>Union[List[float], float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>toc_vars</code> <code>Union[List[str], str, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>toc_varscale</code> <code>Union[List[float], float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>tss_vars</code> <code>Union[List[str], str, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>tss_varscale</code> <code>Union[List[float], float, None]</code> <p>Undocumented parameter.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.aed_nml.TotalsBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.aed_nml.TotalsBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.TotalsBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.TotalsBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.aed_nml.TotalsBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.aed_nml.TotalsBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.aed_nml.TotalsBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.TotalsBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.aed_nml.TracerBlock","title":"<code>TracerBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>aed_tracer</code> block.</p> <p>Modellers can use the aed_tracer to simulate a dissolved or particulate tracer (subject to transport processes only), or this can be optionally configured to account for decay, sedimentation and/or resuspension. This module also include an option to simulate water \u201cretention time\u201d where the water age increments once enters into the waterbody.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.aed_nml.TracerBlock.__init__","title":"<code>__init__(retention_time=None, num_tracers=None, decay=None, fsed=None, ke_ss=None, settling=None, w_ss=None, d_ss=None, rho_ss=None, resuspension=None, fs=None, epsilon=None, tau_0=None, tau_r=None, ktau_0=None, macrophyte_link_var=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>retention_time</code> <code>Union[bool, None]</code> <p>Activates the retention time variable.</p> <code>None</code> <code>num_tracers</code> <code>Union[int, None]</code> <p>Number of tracers to model.</p> <code>None</code> <code>decay</code> <code>Union[List[float], float, None]</code> <p>Vector of decay rates for each simulated tracer group.</p> <code>None</code> <code>fsed</code> <code>Union[List[float], None]</code> <p>Vector of sediment flux rates for each simulated tracer group.</p> <code>None</code> <code>ke_ss</code> <code>Union[List[float], float, None]</code> <p>Vector of specific light attenuation constants for each simulated tracer group.</p> <code>None</code> <code>settling</code> <code>Union[int, None]</code> <p>Settling sub-model. <code>0</code> for none, <code>1</code> for constant, <code>2</code> for constant (temp. adjusted), <code>3</code> for Stokes.</p> <code>None</code> <code>w_ss</code> <code>Union[List[float], float, None]</code> <p>Vector of sedimentation velocity. Used if <code>settling</code> is <code>1</code> or <code>2</code>.</p> <code>None</code> <code>d_ss</code> <code>Union[List[float], float, None]</code> <p>Vector of particle diameter. Used if <code>settling</code> is <code>3</code>.</p> <code>None</code> <code>rho_ss</code> <code>Union[List[float], float, None]</code> <p>Vector of particle density.  Used if <code>settling</code> is <code>3</code>.</p> <code>None</code> <code>resuspension</code> <code>Union[int, None]</code> <p>Resuspension sub-model. <code>0</code> for none, <code>1</code> for constant, <code>2</code> for constant adjusted, <code>3</code> for Stokes.</p> <code>None</code> <code>fs</code> <code>Union[List[float], float, None]</code> <p>Vector of particle fraction within the sediment. Must be of length <code>num_tracers</code>.</p> <code>None</code> <code>epsilon</code> <code>Union[List[float], float, None]</code> <p>Vector of resuspension rate coefficient.</p> <code>None</code> <code>tau_0</code> <code>Union[List[float], float, None]</code> <p>Vector of critical shear stress for resuspension.</p> <code>None</code> <code>tau_r</code> <code>Union[List[float], float, None]</code> <p>Reference shear stress.</p> <code>None</code> <code>ktau_0</code> <code>Union[List[float], float, None]</code> <p>Coefficient determining the effect of <code>macrophyte_link_var</code> on <code>tau_0</code>.</p> <code>None</code> <code>macrophyte_link_var</code> <code>Union[str, None]</code> <p>AED2 benthic variable on which the critical shear stress depends.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.aed_nml.TracerBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.aed_nml.TracerBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.TracerBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.TracerBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.aed_nml.TracerBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.aed_nml.TracerBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.aed_nml.TracerBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.TracerBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.aed_nml.ZooplanktonBlock","title":"<code>ZooplanktonBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>aed_zooplankton</code> block.</p> <p>Simulates different size classes of zooplankton, accounting for carbon and nutrient assimilation from grazing, carbon loss via respiration, excretion of DOM, faecal pellet production, mortality, and predation by larger organisms.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.aed_nml.ZooplanktonBlock.__init__","title":"<code>__init__(num_zoops=None, the_zoops=None, dn_target_variable=None, pn_target_variable=None, dp_target_variable=None, pp_target_variable=None, dc_target_variable=None, pc_target_variable=None, dbase=None, simzoopfeedback=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>num_zoops</code> <code>Union[int, None]</code> <p>Number of zooplankton groups.</p> <code>None</code> <code>the_zoops</code> <code>Union[List[int], int, None]</code> <p>List of ID's of groups in aed_zoo_pars database. Length must equal <code>num_phyto</code>.</p> <code>None</code> <code>dn_target_variable</code> <code>Union[str, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>pn_target_variable</code> <code>Union[str, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>dp_target_variable</code> <code>Union[str, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>pp_target_variable</code> <code>Union[str, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>dc_target_variable</code> <code>Union[str, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>pc_target_variable</code> <code>Union[str, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>dbase</code> <code>Union[str, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>simzoopfeedback</code> <code>Union[bool, None]</code> <p>Undocumented parameter.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.aed_nml.ZooplanktonBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.aed_nml.ZooplanktonBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.ZooplanktonBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.ZooplanktonBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.aed_nml.ZooplanktonBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.aed_nml.ZooplanktonBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.aed_nml.ZooplanktonBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.aed_nml.ZooplanktonBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.glm_nml","title":"<code>glm_nml</code>","text":""},{"location":"nml/#glmpy.nml.glm_nml.BirdModelBlock","title":"<code>BirdModelBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>bird_model</code> block.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.glm_nml.BirdModelBlock.__init__","title":"<code>__init__(ap=None, oz=None, watvap=None, aod500=None, aod380=None, albedo=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>ap</code> <code>Union[float, None]</code> <p>Atmospheric pressure (hPa).</p> <code>None</code> <code>oz</code> <code>Union[float, None]</code> <p>Ozone concentration (atm-cm).</p> <code>None</code> <code>watvap</code> <code>Union[float, None]</code> <p>Total Precipitable water vapor (atm-cm).</p> <code>None</code> <code>aod500</code> <code>Union[float, None]</code> <p>Dimensionless Aerosol Optical Depth at wavelength 500 nm.</p> <code>None</code> <code>aod380</code> <code>Union[float, None]</code> <p>Dimensionless Aerosol Optical Depth at wavelength 380 nm.</p> <code>None</code> <code>albedo</code> <code>Union[float, None]</code> <p>Albedo of the surface used for Bird Model insolation calculation.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.glm_nml.BirdModelBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.glm_nml.BirdModelBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.BirdModelBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.BirdModelBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.glm_nml.BirdModelBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.glm_nml.BirdModelBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.glm_nml.BirdModelBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.BirdModelBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.glm_nml.GLMNML","title":"<code>GLMNML</code>","text":"<p>             Bases: <code>NML</code></p> <p><code>NML</code> subclass for the <code>glm</code> .NML file.</p> <p>Attributes:</p> Name Type Description <code>blocks</code> <code>Dict[str, NMLBlock]</code> <p>Dictionary of <code>NMLBlock</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off block and parameter validation.</p>"},{"location":"nml/#glmpy.nml.glm_nml.GLMNML.__init__","title":"<code>__init__(glm_setup=GLMSetupBlock(), time=TimeBlock(), morphometry=MorphometryBlock(), init_profiles=InitProfilesBlock(), mixing=MixingBlock(), wq_setup=WQSetupBlock(), output=OutputBlock(), light=LightBlock(), bird_model=BirdModelBlock(), sediment=SedimentBlock(), snowice=SnowIceBlock(), meteorology=MeteorologyBlock(), inflow=InflowBlock(), outflow=OutflowBlock())</code>","text":"<p>Parameters:</p> Name Type Description Default <code>glm_setup</code> <code>GLMSetupBlock</code> <code>GLMSetupBlock()</code> <code>time</code> <code>TimeBlock</code> <code>TimeBlock()</code> <code>morphometry</code> <code>MorphometryBlock</code> <code>MorphometryBlock()</code> <code>init_profiles</code> <code>InitProfilesBlock</code> <code>InitProfilesBlock()</code> <code>mixing</code> <code>MixingBlock</code> <code>MixingBlock()</code> <code>wq_setup</code> <code>WQSetupBlock</code> <code>WQSetupBlock()</code> <code>output</code> <code>OutputBlock</code> <code>OutputBlock()</code> <code>light</code> <code>LightBlock</code> <code>LightBlock()</code> <code>bird_model</code> <code>BirdModelBlock</code> <code>BirdModelBlock()</code> <code>sediment</code> <code>SedimentBlock</code> <code>SedimentBlock()</code> <code>snowice</code> <code>SnowIceBlock</code> <code>SnowIceBlock()</code> <code>meteorology</code> <code>MeteorologyBlock</code> <code>MeteorologyBlock()</code> <code>inflow</code> <code>InflowBlock</code> <code>InflowBlock()</code> <code>outflow</code> <code>OutflowBlock</code> <code>OutflowBlock()</code>"},{"location":"nml/#glmpy.nml.glm_nml.GLMNML.from_dict","title":"<code>from_dict(nml_dict)</code>  <code>classmethod</code>","text":"<p>Initialise class instance from a dictionary.</p> <p>Returns an instance of the class that has been initialised with a nested dictionary of NML parameters.</p> <p>Parameters:</p> Name Type Description Default <code>nml_dict</code> <code>dict</code> <p>A dictionary where the keys are the block names and the values are dictionaries of parameter names (keys) and parameter values (values).</p> required"},{"location":"nml/#glmpy.nml.glm_nml.GLMNML.from_file","title":"<code>from_file(nml_path)</code>  <code>classmethod</code>","text":"<p>Initialise class instance from a NML file.</p> <p>Returns an instance of the class that has been initialised with parameters from a NML file.</p> <p>Parameters:</p> Name Type Description Default <code>nml_path</code> <code>dict</code> <p>Path to the NML file.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.GLMNML.get_block","title":"<code>get_block(block_name)</code>","text":"<p>Get a NML Block.</p> <p>Returns an instance of a <code>NMLBlock</code> subclass from the NML.</p> <p>Parameters:</p> Name Type Description Default <code>block_name</code> <code>str</code> <p>The block name.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.GLMNML.get_block_names","title":"<code>get_block_names()</code>","text":"<p>List the block names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLBlock</code> subclass instances.</p>"},{"location":"nml/#glmpy.nml.glm_nml.GLMNML.get_param_names","title":"<code>get_param_names(block_name)</code>","text":"<p>List the parameter names in a block.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p> <p>Parameters:</p> Name Type Description Default <code>block_name</code> <code>str</code> <p>The block name.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.GLMNML.get_param_units","title":"<code>get_param_units(block_name, param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>block_name</code> <code>str</code> <p>The block name.</p> required <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.GLMNML.get_param_value","title":"<code>get_param_value(block_name, param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>block_name</code> <code>str</code> <p>The block name.</p> required <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.GLMNML.init_blocks","title":"<code>init_blocks(*args)</code>","text":"<p>Populate the <code>blocks</code> dictionary with instances of <code>NMLBlock</code> subclasses.</p>"},{"location":"nml/#glmpy.nml.glm_nml.GLMNML.is_none_nml","title":"<code>is_none_nml()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>is_none_block()</code> is <code>True</code> for all subclassed <code>NMLBlock</code> instances in the <code>blocks</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.glm_nml.GLMNML.iter_blocks","title":"<code>iter_blocks()</code>","text":"<p>Iterate over all <code>NMLBlock</code> objects.</p>"},{"location":"nml/#glmpy.nml.glm_nml.GLMNML.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.glm_nml.GLMNML.set_block","title":"<code>set_block(block_name, block)</code>","text":"<p>Set a NML Block.</p> <p>Overrides, or adds a new block, to a NML.</p> <p>Parameters:</p> Name Type Description Default <code>block_name</code> <code>str</code> <p>The block name.</p> required <code>block</code> <code>NMLBlock</code> <p>The block to set.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.GLMNML.set_param_value","title":"<code>set_param_value(block_name, param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>block_name</code> <code>str</code> <p>The block name.</p> required <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.GLMNML.to_dict","title":"<code>to_dict(none_blocks=True, none_params=True)</code>","text":"<p>Nested dictionary of parameters.</p> <p>Returns a nested dictionary where the keys are the block names and the values a dictionary of parameter values.</p> <p>Parameters:</p> Name Type Description Default <code>none_blocks</code> <code>bool</code> <p>Whether to include blocks where all parameter values are <code>None</code>.</p> <code>True</code> <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.glm_nml.GLMNML.to_nml","title":"<code>to_nml(nml_path='glm3.nml')</code>","text":"<p>Write a NML file.</p> <p>Parameters with values of <code>None</code> are omitted.</p> <p>Parameters:</p> Name Type Description Default <code>nml_path</code> <code>str</code> <p>Path to the NML file</p> <code>'glm3.nml'</code>"},{"location":"nml/#glmpy.nml.glm_nml.GLMSetupBlock","title":"<code>GLMSetupBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>glm_setup</code> block.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.glm_nml.GLMSetupBlock.__init__","title":"<code>__init__(sim_name=None, max_layers=None, min_layer_vol=None, min_layer_thick=None, max_layer_thick=None, density_model=None, non_avg=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>sim_name</code> <code>Union[str, None]</code> <p>Title of simulation.</p> <code>None</code> <code>max_layers</code> <code>Union[int, None]</code> <p>Maximum number of layers.</p> <code>None</code> <code>min_layer_vol</code> <code>Union[float, None]</code> <p>Minimum layer volume (m^3).</p> <code>None</code> <code>min_layer_thick</code> <code>Union[float, None]</code> <p>Minimum thickness of a layer (m).</p> <code>None</code> <code>max_layer_thick</code> <code>Union[float, None]</code> <p>Maximum thickness of a layer (m).</p> <code>None</code> <code>density_model</code> <code>Union[int, None]</code> <p>Switch to set the density equation. Options are <code>1</code> for TEOS-10, <code>2</code> for UNESCO(1981), and <code>3</code> for a custom implementation.</p> <code>None</code> <code>non_avg</code> <code>Union[bool, None]</code> <p>Switch to configure flow boundary condition temporal interpolation.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.glm_nml.GLMSetupBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.glm_nml.GLMSetupBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.GLMSetupBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.GLMSetupBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.glm_nml.GLMSetupBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.glm_nml.GLMSetupBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.glm_nml.GLMSetupBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.GLMSetupBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.glm_nml.InflowBlock","title":"<code>InflowBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>inflow</code> block.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.glm_nml.InflowBlock.__init__","title":"<code>__init__(num_inflows=None, names_of_strms=None, subm_flag=None, subm_elev=None, strm_hf_angle=None, strmbd_slope=None, strmbd_drag=None, coef_inf_entrain=None, inflow_factor=None, inflow_fl=None, inflow_varnum=None, inflow_vars=None, time_fmt=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>num_inflows</code> <code>Union[int, None]</code> <p>Number of inflows to be simulated in this simulation.</p> <code>None</code> <code>names_of_strms</code> <code>Union[List[str], str, None]</code> <p>Names of each inflow. A list if <code>num_inflows &gt; 1</code>.</p> <code>None</code> <code>subm_flag</code> <code>Union[List[bool], bool, None]</code> <p>Switch indicating if the inflow is entering as a submerged input. A list if <code>num_inflows &gt; 1</code>.</p> <code>None</code> <code>subm_elev</code> <code>Union[List[float], float, None]</code> <p>Elevation of the submerged inflow. A list if <code>num_inflows &gt; 1</code>.</p> <code>None</code> <code>strm_hf_angle</code> <code>Union[List[float], float, None]</code> <p>Angle describing the width of an inflow river channel (\"half angle\"). A list if <code>num_inflows &gt; 1</code>.</p> <code>None</code> <code>strmbd_slope</code> <code> Union[List[float], float, None]</code> <p>Slope of the streambed / river thalweg for each river (degrees). A list if <code>num_inflows &gt; 1</code>.</p> <code>None</code> <code>strmbd_drag</code> <code>Union[List[float], float, None]</code> <p>Drag coefficient of the river inflow thalweg, to calculate entrainment during insertion. A list if <code>num_inflows &gt; 1</code>.</p> <code>None</code> <code>coef_inf_entrain</code> <code>Union[List[float], float, None]</code> <p>Undocumented parameter. A list if <code>num_inflows &gt; 1</code>.</p> <code>None</code> <code>inflow_factor</code> <code>Union[List[float], float, None]</code> <p>Scaling factor that can be applied to adjust the provided input data. A list if <code>num_inflows &gt; 1</code>.</p> <code>None</code> <code>inflow_fl</code> <code>Union[List[str], str, None]</code> <p>Filename(s) of the inflow CSV boundary condition files. A list if <code>num_inflows &gt; 1</code>.</p> <code>None</code> <code>inflow_varnum</code> <code>Union[int, None]</code> <p>Number of variables being listed in the columns of <code>inflow_fl</code>. Can include GLM variables.</p> <code>None</code> <code>inflow_vars</code> <code>Union[List[str], str, None]</code> <p>Names of the variables in the <code>inflow_fl</code>. Provide variables in the order as they are in the file.</p> <code>None</code> <code>time_fmt</code> <code>Union[str, None]</code> <p>Time format of the 1st column in the <code>inflow_fl</code>. For example, <code>'YYYY-MM-DD hh:mm:ss'</code>.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.glm_nml.InflowBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.glm_nml.InflowBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.InflowBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.InflowBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.glm_nml.InflowBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.glm_nml.InflowBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.glm_nml.InflowBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.InflowBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.glm_nml.InitProfilesBlock","title":"<code>InitProfilesBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>init_profiles</code> block.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.glm_nml.InitProfilesBlock.__init__","title":"<code>__init__(lake_depth=None, num_depths=None, the_depths=None, the_temps=None, the_sals=None, num_wq_vars=None, wq_names=None, wq_init_vals=None, snow_thickness=None, white_ice_thickness=None, blue_ice_thickness=None, avg_surf_temp=None, restart_variables=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>lake_depth</code> <code>Union[float, None]</code> <p>Initial lake height/depth (m).</p> <code>None</code> <code>num_depths</code> <code>Union[int, None]</code> <p>Number of depths provided for initial profiles.</p> <code>None</code> <code>the_depths</code> <code>Union[List[float], float, None]</code> <p>The depths of the initial profile points (m).</p> <code>None</code> <code>the_temps</code> <code>Union[List[float], float, None]</code> <p>The temperature (\u00b0C) at each of the initial profile points.</p> <code>None</code> <code>the_sals</code> <code>Union[List[float], float, None]</code> <p>The salinity (ppt) at each of the initial profile points.</p> <code>None</code> <code>num_wq_vars</code> <code>Union[int, None]</code> <p>Number of non-GLM (i.e., FABM or AED2) variables to be initialised.</p> <code>None</code> <code>wq_names</code> <code>Union[List[str], str, None]</code> <p>Names of non-GLM (i.e., FABM or AED2) variables to be initialised.</p> <code>None</code> <code>wq_init_vals</code> <code>Union[List[float], float, None]</code> <p>List of water quality variable initial data.</p> <code>None</code> <code>snow_thickness</code> <code>Union[float, None]</code> <p>Thickness of snow (m).</p> <code>None</code> <code>white_ice_thickness</code> <code>Union[float, None]</code> <p>Thickness of white ice (m).</p> <code>None</code> <code>blue_ice_thickness</code> <code>Union[float, None]</code> <p>Thickness of blue ice (m).</p> <code>None</code> <code>restart_variables</code> <code>Union[List[float], float, None]</code> <p>Restart variables to restart model from a previous saved state.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.glm_nml.InitProfilesBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.glm_nml.InitProfilesBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.InitProfilesBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.InitProfilesBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.glm_nml.InitProfilesBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.glm_nml.InitProfilesBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.glm_nml.InitProfilesBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.InitProfilesBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.glm_nml.LightBlock","title":"<code>LightBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>light</code> block.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.glm_nml.LightBlock.__init__","title":"<code>__init__(light_mode=None, kw=None, kw_file=None, n_bands=None, light_extc=None, energy_frac=None, benthic_imin=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>light_mode</code> <code>Union[int, None]</code> <p>Switch to configure the approach to light penetration. Options are <code>0</code> or <code>1</code>.</p> <code>None</code> <code>kw</code> <code>Union[float, None]</code> <p>Light extinction coefficient (m^{-1}). Used when <code>light_mode=0</code>.</p> <code>None</code> <code>kw_file</code> <code>Union[str, None]</code> <p>Name of file with Kw time-series included.</p> <code>None</code> <code>n_bands</code> <code>Union[int, None]</code> <p>Number of light bandwidths to simulate. Used when <code>light_mode=1</code>.</p> <code>None</code> <code>light_extc</code> <code>Union[List[float], float, None]</code> <p>Comma-separated list of light extinction coefficients for each waveband.</p> <code>None</code> <code>energy_frac</code> <code>Union[List[float], float, None]</code> <p>Comma-separated list of energy fraction captured by each waveband.</p> <code>None</code> <code>benthic_imin</code> <code>Union[float, None]</code> <p>Critical fraction of incident light reaching the benthos.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.glm_nml.LightBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.glm_nml.LightBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.LightBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.LightBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.glm_nml.LightBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.glm_nml.LightBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.glm_nml.LightBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.LightBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.glm_nml.MeteorologyBlock","title":"<code>MeteorologyBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>meteorology</code> block.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.glm_nml.MeteorologyBlock.__init__","title":"<code>__init__(met_sw=None, meteo_fl=None, subdaily=None, time_fmt=None, rad_mode=None, albedo_mode=None, sw_factor=None, lw_type=None, cloud_mode=None, lw_factor=None, lw_offset=None, atm_stab=None, rh_factor=None, at_factor=None, ce=None, ch=None, rain_sw=None, rain_factor=None, catchrain=None, rain_threshold=None, runoff_coef=None, cd=None, wind_factor=None, fetch_mode=None, aws=None, xws=None, num_dir=None, wind_dir=None, fetch_scale=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>met_sw</code> <code>Union[bool, None]</code> <p>Switch to enable the surface heating module.</p> <code>None</code> <code>meteo_fl</code> <code>Union[str, None]</code> <p>Filename of the meterological file. Include path and filename.</p> <code>None</code> <code>subdaily</code> <code>Union[bool, None]</code> <p>Switch to indicate the meteorological data is provided with sub-daily resolution, at an interval equivalent to <code>dt</code> from <code>TimeBlock</code> (\u0394t).</p> <code>None</code> <code>time_fmt</code> <code>Union[str, None]</code> <p>Time format of the 1st column in the inflow_fl. For example, 'YYYY-MM-DD hhss'.</p> <code>None</code> <code>rad_mode</code> <code>Union[int, None]</code> <p>Switch to configure which incoming radiation option to use. Options are <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, or <code>5</code>.</p> <code>None</code> <code>albedo_mode</code> <code>Union[int, None]</code> <p>Switch to configure which albedo calculation option is used. Options are <code>1</code> for Hamilton &amp; Schladow, <code>2</code> for Briegleb et al., or <code>3</code> for Yajima &amp; Yamamoto.</p> <code>None</code> <code>sw_factor</code> <code>Union[float, None]</code> <p>Scaling factor to adjust the shortwave radiation data provided in the <code>meteo_fl</code>.</p> <code>None</code> <code>lw_type</code> <code>Union[str, None]</code> <p>Switch to configure which input approach is being used for longwave/cloud data in the <code>meteo_fl</code>. Options are <code>'LW_IN'</code> for incident longwave, <code>'LW_NET'</code> for net longwave, or <code>'LW_CC'</code> for cloud cover.</p> <code>None</code> <code>cloud_mode</code> <code>Union[int, None]</code> <p>Switch to configure which atmospheric emmissivity calculation option is used. Options are <code>1</code> for Idso and Jackson, <code>2</code> for Swinbank, <code>3</code> for Brutsaert, <code>4</code> for Yajima &amp; Yamamoto.</p> <code>None</code> <code>lw_factor</code> <code>Union[float, None]</code> <p>Scaling factor to adjust the longwave (or cloud) data provided in the <code>meteo_fl</code>.</p> <code>None</code> <code>atm_stab</code> <code>Union[int, None]</code> <p>Switch to configure which approach to atmospheric stability is used. <code>0</code> for neutral conditions, <code>1</code> for an undocumented use case, and <code>2</code> for an undocumented use case.</p> <code>None</code> <code>rh_factor</code> <code>Union[float, None]</code> <p>Scaling factor to adjust the relative humidity data provided in the <code>meteo_fl</code>.</p> <code>None</code> <code>at_factor</code> <code>Union[float, None]</code> <p>Scaling factor to adjust the air temperature data provided in the <code>meteo_fl</code>.</p> <code>None</code> <code>ce</code> <code>Union[float, None]</code> <p>Bulk aerodynamic transfer coefficient for latent heat flux.</p> <code>None</code> <code>ch</code> <code>Union[float, None]</code> <p>Bulk aerodynamic transfer coefficient for sensible heat flux.</p> <code>None</code> <code>rain_sw</code> <code>Union[bool, None]</code> <p>Switch to configure rainfall input concentrations.</p> <code>None</code> <code>rain_factor</code> <code>Union[float, None]</code> <p>Scaling factor to adjust the rainfall data provided in the <code>meteo_fl</code>.</p> <code>None</code> <code>catchrain</code> <code>Union[bool, None]</code> <p>Switch that configures runoff from exposed banks of lake area.</p> <code>None</code> <code>rain_threshold</code> <code>Union[float, None]</code> <p>Daily rainfall amount (m) required before runoff from exposed banks occurs.</p> <code>None</code> <code>runoff_coef</code> <code>Union[float, None]</code> <p>Conversion fraction of infiltration excess rainfall to runoff in exposed lake banks.</p> <code>None</code> <code>cd</code> <code>Union[float, None]</code> <p>Bulk aerodynamic transfer coefficient for momentum.</p> <code>None</code> <code>wind_factor</code> <code>Union[float, None]</code> <p>Scaling factor to adjust the windspeed data provided in the <code>meteo_fl</code>.</p> <code>None</code> <code>fetch_mode</code> <code>Union[int, None]</code> <p>Switch to configure which wind-sheltering/fetch option to use. Options are <code>0</code> for no sheltering, <code>1</code> for area-based scaling, <code>2</code> for Markfort length-scale, or <code>3</code> for user input scaling table.</p> <code>None</code> <code>aws</code> <code>Union[float, None]</code> <p>Undocumented parameter. Required if <code>fetch_mode</code> is <code>1</code>.</p> <code>None</code> <code>xws</code> <code>Union[float, None]</code> <p>Undocumented parameter. Required if <code>fetch_mode</code> is <code>2</code>.</p> <code>None</code> <code>num_dir</code> <code>Union[int, None]</code> <p>Number of wind direction reference points being read in. Required if <code>fetch_mode</code> is <code>2</code> or <code>fetch_mode</code> is <code>3</code>.</p> <code>None</code> <code>wind_dir</code> <code>Union[float, None]</code> <p>Wind directions used for wind-sheltering effects. Required if <code>fetch_mode=2</code> or <code>fetch_mode=3</code>.</p> <code>None</code> <code>fetch_scale</code> <code>Union[float, None]</code> <p>Direction specific wind-sheltering scaling factors. Required if <code>fetch_mode=2</code> or <code>fetch_mode=3</code>.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.glm_nml.MeteorologyBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.glm_nml.MeteorologyBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.MeteorologyBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.MeteorologyBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.glm_nml.MeteorologyBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.glm_nml.MeteorologyBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.glm_nml.MeteorologyBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.MeteorologyBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.glm_nml.MixingBlock","title":"<code>MixingBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>mixing</code> block.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.glm_nml.MixingBlock.__init__","title":"<code>__init__(surface_mixing=None, coef_mix_conv=None, coef_wind_stir=None, coef_mix_shear=None, coef_mix_turb=None, coef_mix_kh=None, deep_mixing=None, coef_mix_hyp=None, coef_mix_shreq=None, diff=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>surface_mixing</code> <code>Union[int, None]</code> <p>Switch to select the options of the surface mixing model. Options are <code>0</code> for no surface mixing, <code>1</code>, and <code>2</code>.</p> <code>None</code> <code>coef_mix_conv</code> <code>Union[float, None]</code> <p>Mixing efficiency - convective overturn.</p> <code>None</code> <code>coef_wind_stir</code> <code>Union[float, None]</code> <p>Mixing efficiency - wind stirring.</p> <code>None</code> <code>coef_mix_shear</code> <code>Union[float, None]</code> <p>Mixing efficiency - shear production.</p> <code>None</code> <code>coef_mix_turb</code> <code>Union[float, None]</code> <p>Mixing efficiency - unsteady turbulence effects.</p> <code>None</code> <code>coef_mix_kh</code> <code>Union[float, None]</code> <p>Mixing efficiency - Kelvin-Helmholtz billowing.</p> <code>None</code> <code>deep_mixing</code> <code>Union[int, None]</code> <p>Switch to select the options of the deep (hypolimnetic) mixing model. Options are <code>0</code> for no deep mixing, <code>1</code> for constant diffusivity, and <code>2</code> for the Weinstock model.</p> <code>None</code> <code>coef_mix_hyp</code> <code>Union[float, None]</code> <p>Mixing efficiency - hypolimnetic turbulence.</p> <code>None</code> <code>coef_mix_shreq</code> <code>Union[int, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>diff</code> <code>Union[float, None]</code> <p>Background (molecular) diffusivity in the hypolimnion.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.glm_nml.MixingBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.glm_nml.MixingBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.MixingBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.MixingBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.glm_nml.MixingBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.glm_nml.MixingBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.glm_nml.MixingBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.MixingBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.glm_nml.MorphometryBlock","title":"<code>MorphometryBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>morphometry</code> block.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.glm_nml.MorphometryBlock.__init__","title":"<code>__init__(lake_name=None, latitude=None, longitude=None, base_elev=None, crest_elev=None, bsn_len=None, bsn_wid=None, bsn_vals=None, h=None, a=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>lake_name</code> <code>Union[str, None]</code> <p>Site name.</p> <code>None</code> <code>latitude</code> <code>Union[float, None]</code> <p>Latitude, positive North (\u00b0N).</p> <code>None</code> <code>longitude</code> <code>Union[float, None]</code> <p>Longitude, positive East (\u00b0E).</p> <code>None</code> <code>base_elev</code> <code>Union[float, None]</code> <p>Elevation of the bottom-most point of the lake (m above datum).</p> <code>None</code> <code>crest_elev</code> <code>Union[float, None]</code> <p>Elevation of a weir crest, where overflow begins (m above datum).</p> <code>None</code> <code>bsn_len</code> <code>Union[float, None]</code> <p>Length of the lake basin, at crest height (m).</p> <code>None</code> <code>bsn_wid</code> <code>Union[float, None]</code> <p>Width of the lake basin, at crest height (m).</p> <code>None</code> <code>bsn_vals</code> <code>Union[int, None]</code> <p>Number of points being provided to described the hyposgraphic details.</p> <code>None</code> <code>h</code> <code>Union[List[float], None]</code> <p>Comma-separated list of lake elevations (m above datum).</p> <code>None</code> <code>a</code> <code>Union[List[float], None]</code> <p>Comma-separated list of lake areas (m^2).</p> <code>None</code>"},{"location":"nml/#glmpy.nml.glm_nml.MorphometryBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.glm_nml.MorphometryBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.MorphometryBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.MorphometryBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.glm_nml.MorphometryBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.glm_nml.MorphometryBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.glm_nml.MorphometryBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.MorphometryBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.glm_nml.OutflowBlock","title":"<code>OutflowBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>outflow</code> block.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.glm_nml.OutflowBlock.__init__","title":"<code>__init__(num_outlet=None, outflow_fl=None, time_fmt=None, outflow_factor=None, outflow_thick_limit=None, single_layer_draw=None, flt_off_sw=None, outlet_type=None, outl_elvs=None, bsn_len_outl=None, bsn_wid_outl=None, crit_o2=None, crit_o2_dep=None, crit_o2_days=None, outlet_crit=None, o2name=None, o2idx=None, target_temp=None, min_lake_temp=None, fac_range_upper=None, fac_range_lower=None, mix_withdraw=None, coupl_oxy_sw=None, withdrtemp_fl=None, seepage=None, seepage_rate=None, crest_width=None, crest_factor=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>num_outlet</code> <code>Union[int, None]</code> <p>Number of outflows (including withdrawals, outlets or offtakes) to be included in this simulation.</p> <code>None</code> <code>outflow_fl</code> <code>Union[List[str], str, None]</code> <p>Filename of the file containing the outflow time-series. A list if <code>num_outlet &gt; 1</code>.</p> <code>None</code> <code>time_fmt</code> <code>Union[str, None]</code> <p>Time format of the 1st column in the <code>outflow_fl</code>.</p> <code>None</code> <code>outflow_factor</code> <code>Union[List[float], float, None]</code> <p>Scaling factor used as a multiplier for outflows. A list if <code>num_outlet &gt; 1</code>.</p> <code>None</code> <code>outflow_thick_limit</code> <code>Union[List[float], float, None]</code> <p>Maximum vertical limit of withdrawal entrainment. A list if <code>num_outlet &gt; 1</code>.</p> <code>None</code> <code>single_layer_draw</code> <code>Union[List[bool], bool, None]</code> <p>Switch to only limit withdrawal entrainment and force outflows from layer at the outlet elevation height. A list if <code>num_outlet &gt; 1</code>.</p> <code>None</code> <code>flt_off_sw</code> <code>Union[List[bool], bool, None]</code> <p>Switch to indicate if the outflows are floating offtakes (taking water from near the surface). A list if <code>num_outlet &gt; 1</code>.</p> <code>None</code> <code>outlet_type</code> <code>Union[List[int], int, None]</code> <p>Switch to configure approach of each withdrawal. Options are <code>1</code> for fixed outlet height, <code>2</code> for floating offtake, <code>3</code> for adaptive offtake/low oxy avoidance, <code>4</code> for adaptive offtake/isotherm following, or <code>5</code> for adaptive offtake/temp time-series. A list if <code>num_outlet &gt; 1</code>.</p> <code>None</code> <code>outl_elvs</code> <code>Union[List[float], float, None]</code> <p>Outlet elevations (m). A list if <code>num_outlet &gt; 1</code>.</p> <code>None</code> <code>bsn_len_outl</code> <code>Union[List[float], float, None]</code> <p>Basin length at the outlet height(s) (m). A list if <code>num_outlet &gt; 1</code>.</p> <code>None</code> <code>bsn_wid_outl</code> <code>Union[List[float], float, None]</code> <p>Basin width at the outlet heights (m). A list if <code>num_outlet &gt; 1</code>.</p> <code>None</code> <code>crit_o2</code> <code>Union[int, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>crit_o2_dep</code> <code>Union[int, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>crit_o2_days</code> <code>Union[int, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>outlet_crit</code> <code>Union[int, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>o2name</code> <code>Union[str, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>o2idx</code> <code>Union[str, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>target_temp</code> <code>Union[float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>min_lake_temp</code> <code>Union[float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>fac_range_upper</code> <code>Union[float, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>fac_range_lower</code> <code>Union[float, None</code> <p>Undocumented parameter.</p> <code>None</code> <code>mix_withdraw</code> <code>Union[bool, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>coupl_oxy_sw</code> <code>Union[bool, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>withdrtemp_fl</code> <code>Union[str, None]</code> <p>Filename of the file containing the temperature time-series the adaptive withdrawal is targeting. Required if <code>outlet_type=5</code>.</p> <code>None</code> <code>seepage</code> <code>Union[bool, None]</code> <p>Switch to enable the seepage of water from the lake bottom.</p> <code>None</code> <code>seepage_rate</code> <code>Union[float, None]</code> <p>Seepage rate of water, or, soil hydraulic conductivity (m day^{-1}).</p> <code>None</code> <code>crest_width</code> <code>Union[float, None]</code> <p>Width of weir (at crest height) where lake overflows (m).</p> <code>None</code> <code>crest_factor</code> <code>Union[float, None]</code> <p>Drag coefficient associated with the weir crest, used to compute the overflow discharge rate. Applies only when the crest elevation is configured to be less than the maximum elevation of the domain.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.glm_nml.OutflowBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.glm_nml.OutflowBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.OutflowBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.OutflowBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.glm_nml.OutflowBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.glm_nml.OutflowBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.glm_nml.OutflowBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.OutflowBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.glm_nml.OutputBlock","title":"<code>OutputBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>output</code> block.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.glm_nml.OutputBlock.__init__","title":"<code>__init__(out_dir=None, out_fn=None, nsave=None, csv_lake_fname=None, csv_point_nlevs=None, csv_point_fname=None, csv_point_frombot=None, csv_point_at=None, csv_point_nvars=None, csv_point_vars=None, csv_outlet_allinone=None, csv_outlet_fname=None, csv_outlet_nvars=None, csv_outlet_vars=None, csv_ovrflw_fname=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>out_dir</code> <code>Union[str, None]</code> <p>Directory to write the output files.</p> <code>None</code> <code>out_fn</code> <code>Union[str, None]</code> <p>Filename of the main NetCDF output file.</p> <code>None</code> <code>nsave</code> <code>Union[int, None]</code> <p>Frequency to write to the NetCDF and CSV point files.</p> <code>None</code> <code>csv_lake_fname</code> <code>Union[str, None]</code> <p>Filename for the daily summary file.</p> <code>None</code> <code>csv_point_nlevs</code> <code>Union[int, None]</code> <p>Number of specific level/depth CSV files to be created.</p> <code>None</code> <code>csv_point_fname</code> <code>Union[str, None]</code> <p>Name to be appended to specified depth CSV files.</p> <code>None</code> <code>csv_point_frombot</code> <code>Union[List[bool], bool, None]</code> <p>Comma separated list identify whether each output point listed in <code>csv_point_at</code> is relative to the bottom (i.e., heights) or the surface (i.e., depths).</p> <code>None</code> <code>csv_point_at</code> <code>Union[List[float], float, None]</code> <p>Height or Depth of points to output at (comma-separated list).</p> <code>None</code> <code>csv_point_nvars</code> <code>Union[int, None]</code> <p>Number of variables to output into the csv files.</p> <code>None</code> <code>csv_point_vars</code> <code>Union[List[str], str, None]</code> <p>Comma separated list of variable names.</p> <code>None</code> <code>csv_outlet_allinone</code> <code>Union[bool, None]</code> <p>Switch to create an optional outlet file combining all outlets.</p> <code>None</code> <code>csv_outlet_fname</code> <code>Union[str, None]</code> <p>Name to be appended to each of the outlet CSV files.</p> <code>None</code> <code>csv_outlet_nvars</code> <code>Union[int, None]</code> <p>Number of variables to be written into the outlet file(s).</p> <code>None</code> <code>csv_outlet_vars</code> <code>Union[List[str], str, None]</code> <p>Comma separated list of variable names to be included in the output file(s).</p> <code>None</code> <code>csv_ovrflw_fname</code> <code>Union[str, None]</code> <p>Filename to be used for recording the overflow details.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.glm_nml.OutputBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.glm_nml.OutputBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.OutputBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.OutputBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.glm_nml.OutputBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.glm_nml.OutputBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.glm_nml.OutputBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.OutputBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.glm_nml.SedimentBlock","title":"<code>SedimentBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>sediment</code> block.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.glm_nml.SedimentBlock.__init__","title":"<code>__init__(benthic_mode=None, sed_heat_model=None, n_zones=None, sed_heat_ksoil=None, sed_temp_depth=None, sed_temp_mean=None, sed_temp_amplitude=None, sed_temp_peak_doy=None, zone_heights=None, sed_reflectivity=None, sed_roughness=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>benthic_mode</code> <code>Union[int, None]</code> <p>Switch to configure which mode of benthic interaction to apply. Options are <code>0</code> for bottom layer only, <code>1</code> for bottom layer and layer flanks, <code>2</code> for sediment zones, and <code>3</code> for an undocumented use case.</p> <code>None</code> <code>sed_heat_model</code> <code>Union[int, None]</code> <p>Undocumented parameter.</p> <code>None</code> <code>n_zones</code> <code>Union[int, None]</code> <p>Number of sediment zones to simulate. Required if <code>benthic_mode=2</code> or <code>benthic_mode=3</code>.</p> <code>None</code> <code>sed_heat_ksoil</code> <code>Union[float, None]</code> <p>Heat conductivity of soil/sediment.</p> <code>None</code> <code>sed_temp_depth</code> <code>Union[float, None]</code> <p>Depth of soil/sediment layer below the lake bottom, used for heat flux calculation.</p> <code>None</code> <code>sed_temp_mean</code> <code>Union[List[float], float, None]</code> <p>Annual mean sediment temperature. A list if <code>n_zones &gt; 1</code>.</p> <code>None</code> <code>sed_temp_amplitude</code> <code>Union[List[float], float, None]</code> <p>Amplitude of temperature variation experienced in the sediment over one year. A list if <code>n_zones &gt; 1</code>.</p> <code>None</code> <code>sed_temp_peak_doy</code> <code>Union[List[int], int, None]</code> <p>Day of the year where the sediment temperature peaks. A list if <code>n_zones &gt; 1</code>.</p> <code>None</code> <code>zone_heights</code> <code>Union[List[float], float, None]</code> <p>Upper height of zone boundary. Required if <code>benthic_mode=2</code> or <code>benthic_mode=3</code>.</p> <code>None</code> <code>sed_reflectivity</code> <code>Union[List[float], float, None]</code> <p>Sediment reflectivity.</p> <code>None</code> <code>sed_roughness</code> <code>Union[List[float], float, None]</code> <p>Undocumented parameter.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.glm_nml.SedimentBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.glm_nml.SedimentBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.SedimentBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.SedimentBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.glm_nml.SedimentBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.glm_nml.SedimentBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.glm_nml.SedimentBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.SedimentBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.glm_nml.SnowIceBlock","title":"<code>SnowIceBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>snowice</code> block.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.glm_nml.SnowIceBlock.__init__","title":"<code>__init__(snow_albedo_factor=None, snow_rho_min=None, snow_rho_max=None, min_ice_thickness=None, dt_iceon_avg=None, avg_surf_temp_thres=None)</code>","text":"Paramters <p>snow_albedo_factor : Union[float, None]     Scaling factor used to as a multiplier to scale the     snow/ice albedo estimate. snow_rho_min : Union[float, None]     Maximum snow density allowable (kg m^{-3}). snow_rho_max : Union[float, None]     Minimum snow density allowable (kg m^{-3}). min_ice_thickness : Union[float, None]     Undocumented parameter. dt_iceon_avg : Union[float, None]     Undocumented parameter. avg_surf_temp_thres : Union[float, None]     Undocumented parameter.</p>"},{"location":"nml/#glmpy.nml.glm_nml.SnowIceBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.glm_nml.SnowIceBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.SnowIceBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.SnowIceBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.glm_nml.SnowIceBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.glm_nml.SnowIceBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.glm_nml.SnowIceBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.SnowIceBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.glm_nml.TimeBlock","title":"<code>TimeBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>time</code> block.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.glm_nml.TimeBlock.__init__","title":"<code>__init__(timefmt=None, start=None, stop=None, dt=None, num_days=None, timezone=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>timefmt</code> <code>Union[int, None]</code> <p>Time configuration switch. Options are <code>2</code> when using <code>start</code> and <code>stop</code> parameters or <code>3</code> when using <code>num_days</code>.</p> <code>None</code> <code>start</code> <code>Union[str, None]</code> <p>Start time/date of simulation in format 'yyyy-mm-dd hhss'.</p> <code>None</code> <code>stop</code> <code>Union[str, None]</code> <p>End time/date of simulation in format 'yyyy-mm-dd hhss'. Used when <code>timefmt=2</code>.</p> <code>None</code> <code>dt</code> <code>Union[float, None]</code> <p>Time step (seconds).</p> <code>None</code> <code>num_days</code> <code>Union[int, None]</code> <p>Number of days to simulate. Used when <code>timefmt=3</code>.</p> <code>None</code> <code>timezone</code> <code>Union[float, None]</code> <p>UTC time zone.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.glm_nml.TimeBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.glm_nml.TimeBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.TimeBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.TimeBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.glm_nml.TimeBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.glm_nml.TimeBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.glm_nml.TimeBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.TimeBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.glm_nml.WQSetupBlock","title":"<code>WQSetupBlock</code>","text":"<p>             Bases: <code>NMLBlock</code></p> <p><code>NMLBlock</code> subclass for the <code>wq_setup</code> block.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>Dict[str, NMLParam]</code> <p>Dictionary of <code>NMLParam</code> objects.</p> <code>strict</code> <code>bool</code> <p>Switch to turn on or off parameter validation.</p>"},{"location":"nml/#glmpy.nml.glm_nml.WQSetupBlock.__init__","title":"<code>__init__(wq_lib=None, wq_nml_file=None, bioshade_feedback=None, mobility_off=None, ode_method=None, split_factor=None, repair_state=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>wq_lib</code> <code>Union[str, None]</code> <p>Water quality model selection. Options are <code>\"aed2\"</code> and <code>\"fabm\"</code>.</p> <code>None</code> <code>wq_nml_file</code> <code>Union[str, None]</code> <p>Filename of water quality configuration file, e.g., <code>\"./aed2.nml\"</code>.</p> <code>None</code> <code>bioshade_feedback</code> <code>Union[bool, None]</code> <p>Switch to enable K_{w} to be updated by the WQ model.</p> <code>None</code> <code>mobility_off</code> <code>Union[bool, None]</code> <p>Switch to enable settling within the WQ model.</p> <code>None</code> <code>ode_method</code> <code>Union[int, None]</code> <p>Method to use for ODE solution of water quality module.</p> <code>None</code> <code>split_factor</code> <code>Union[float, None]</code> <p>Factor weighting implicit vs explicit numerical solution of the WQ model. <code>split_factor</code> has a valid range between <code>0.0</code> and <code>1.0</code>.</p> <code>None</code> <code>repair_state</code> <code>Union[bool, None]</code> <p>Switch to correct negative or out of range WQ variables.</p> <code>None</code>"},{"location":"nml/#glmpy.nml.glm_nml.WQSetupBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.glm_nml.WQSetupBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.WQSetupBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.WQSetupBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.glm_nml.WQSetupBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.glm_nml.WQSetupBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.glm_nml.WQSetupBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.glm_nml.WQSetupBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.nml","title":"<code>nml</code>","text":""},{"location":"nml/#glmpy.nml.nml.NML","title":"<code>NML</code>","text":"<p>             Bases: <code>ABC</code></p> <p>Base class for all NML classes.</p> <p>Attributes:</p> Name Type Description <code>blocks</code> <code>NMLDict[str, NMLParam]</code> <p>Dictionary of <code>NMLBlock</code> subclass instances.</p> <code>strict</code> <code>bool</code> <p>Toggles <code>strict</code> for each instance of <code>NMLBlock</code> in the <code>blocks</code>dictionary.</p>"},{"location":"nml/#glmpy.nml.nml.NML.from_dict","title":"<code>from_dict(nml_dict)</code>  <code>classmethod</code>","text":"<p>Initialise class instance from a dictionary.</p> <p>Returns an instance of the class that has been initialised with a nested dictionary of NML parameters.</p> <p>Parameters:</p> Name Type Description Default <code>nml_dict</code> <code>dict</code> <p>A dictionary where the keys are the block names and the values are dictionaries of parameter names (keys) and parameter values (values).</p> required"},{"location":"nml/#glmpy.nml.nml.NML.from_file","title":"<code>from_file(nml_path)</code>  <code>classmethod</code>","text":"<p>Initialise class instance from a NML file.</p> <p>Returns an instance of the class that has been initialised with parameters from a NML file.</p> <p>Parameters:</p> Name Type Description Default <code>nml_path</code> <code>dict</code> <p>Path to the NML file.</p> required"},{"location":"nml/#glmpy.nml.nml.NML.get_block","title":"<code>get_block(block_name)</code>","text":"<p>Get a NML Block.</p> <p>Returns an instance of a <code>NMLBlock</code> subclass from the NML.</p> <p>Parameters:</p> Name Type Description Default <code>block_name</code> <code>str</code> <p>The block name.</p> required"},{"location":"nml/#glmpy.nml.nml.NML.get_block_names","title":"<code>get_block_names()</code>","text":"<p>List the block names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLBlock</code> subclass instances.</p>"},{"location":"nml/#glmpy.nml.nml.NML.get_param_names","title":"<code>get_param_names(block_name)</code>","text":"<p>List the parameter names in a block.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p> <p>Parameters:</p> Name Type Description Default <code>block_name</code> <code>str</code> <p>The block name.</p> required"},{"location":"nml/#glmpy.nml.nml.NML.get_param_units","title":"<code>get_param_units(block_name, param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>block_name</code> <code>str</code> <p>The block name.</p> required <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.nml.NML.get_param_value","title":"<code>get_param_value(block_name, param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>block_name</code> <code>str</code> <p>The block name.</p> required <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.nml.NML.init_blocks","title":"<code>init_blocks(*args)</code>","text":"<p>Populate the <code>blocks</code> dictionary with instances of <code>NMLBlock</code> subclasses.</p>"},{"location":"nml/#glmpy.nml.nml.NML.is_none_nml","title":"<code>is_none_nml()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>is_none_block()</code> is <code>True</code> for all subclassed <code>NMLBlock</code> instances in the <code>blocks</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.nml.NML.iter_blocks","title":"<code>iter_blocks()</code>","text":"<p>Iterate over all <code>NMLBlock</code> objects.</p>"},{"location":"nml/#glmpy.nml.nml.NML.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.nml.NML.set_block","title":"<code>set_block(block_name, block)</code>","text":"<p>Set a NML Block.</p> <p>Overrides, or adds a new block, to a NML.</p> <p>Parameters:</p> Name Type Description Default <code>block_name</code> <code>str</code> <p>The block name.</p> required <code>block</code> <code>NMLBlock</code> <p>The block to set.</p> required"},{"location":"nml/#glmpy.nml.nml.NML.set_param_value","title":"<code>set_param_value(block_name, param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>block_name</code> <code>str</code> <p>The block name.</p> required <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.nml.NML.to_dict","title":"<code>to_dict(none_blocks=True, none_params=True)</code>","text":"<p>Nested dictionary of parameters.</p> <p>Returns a nested dictionary where the keys are the block names and the values a dictionary of parameter values.</p> <p>Parameters:</p> Name Type Description Default <code>none_blocks</code> <code>bool</code> <p>Whether to include blocks where all parameter values are <code>None</code>.</p> <code>True</code> <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.nml.NML.to_nml","title":"<code>to_nml(nml_path='glm3.nml')</code>","text":"<p>Write a NML file.</p> <p>Parameters with values of <code>None</code> are omitted.</p> <p>Parameters:</p> Name Type Description Default <code>nml_path</code> <code>str</code> <p>Path to the NML file</p> <code>'glm3.nml'</code>"},{"location":"nml/#glmpy.nml.nml.NML.validate","title":"<code>validate()</code>  <code>abstractmethod</code>","text":"<p>Validation tests for cross-block dependencies.</p> <p>Must be implemented for all subclasses of <code>NML</code>. Implement your own validation tests or use available methods, e.g.,<code>val_required_block()</code>. Raise a <code>ValueError</code> when validation fails.</p>"},{"location":"nml/#glmpy.nml.nml.NMLBlock","title":"<code>NMLBlock</code>","text":"<p>             Bases: <code>ABC</code></p> <p>Base class for all NML block classes.</p> <p>Attributes:</p> Name Type Description <code>params</code> <code>NMLDict[str, NMLParam]</code> <p>Dictionary of <code>NMLParams</code>.</p> <code>strict</code> <code>bool</code> <p>Toggles <code>strict</code> for each instance of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.nml.NMLBlock.get_param_names","title":"<code>get_param_names()</code>","text":"<p>List the parameter names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p>"},{"location":"nml/#glmpy.nml.nml.NMLBlock.get_param_units","title":"<code>get_param_units(param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.nml.NMLBlock.get_param_value","title":"<code>get_param_value(param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"nml/#glmpy.nml.nml.NMLBlock.init_params","title":"<code>init_params(*args)</code>","text":"<p>Populate the <code>params</code> dictionary with instances of <code>NMLParam</code>.</p>"},{"location":"nml/#glmpy.nml.nml.NMLBlock.is_none_block","title":"<code>is_none_block()</code>","text":"<p>Test if all NML parameter values are <code>None</code>.</p> <p>Returns <code>True</code> if <code>NMLParam.value is None</code> for all instances of <code>NMLParam</code> in the <code>params</code> dictionary.</p>"},{"location":"nml/#glmpy.nml.nml.NMLBlock.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"nml/#glmpy.nml.nml.NMLBlock.set_param_value","title":"<code>set_param_value(param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"nml/#glmpy.nml.nml.NMLBlock.to_dict","title":"<code>to_dict(none_params=True)</code>","text":"<p>Dictionary of parameters.</p> <p>Returns a dictionary of the block's parameters.</p> <p>Parameters:</p> Name Type Description Default <code>none_params</code> <code>bool</code> <p>Whether to include parameter values that are <code>None</code>.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.nml.NMLBlock.validate","title":"<code>validate()</code>  <code>abstractmethod</code>","text":"<p>Validation tests for cross-parameter dependencies.</p> <p>Must be implemented for all subclasses of <code>NMLBlock</code>. Implement your own validation tests or use available methods, e.g.,<code>val_incompat_param_values()</code> and <code>val_list_len_params()</code>. Raise a <code>ValueError</code> when validation fails.</p>"},{"location":"nml/#glmpy.nml.nml.NMLDict","title":"<code>NMLDict</code>","text":"<p>             Bases: <code>OrderedDict[K, T]</code>, <code>Generic[K, T]</code></p> <p>Ordered dictionary for storing collections of <code>NMLParam</code>, <code>NMLBlock</code>, or <code>NML</code>.</p> <p>Attributes:</p> Name Type Description <code>strict</code> <code>bool</code> <p>Set <code>strict</code> for all values in the dictionary.</p>"},{"location":"nml/#glmpy.nml.nml.NMLDict.validate","title":"<code>validate()</code>","text":"<p>Call <code>validate</code> for each value in the dictionary.</p>"},{"location":"nml/#glmpy.nml.nml.NMLParam","title":"<code>NMLParam</code>","text":"<p>NML Parameter.</p> <p>Class for representing an individual parameter in a NML file. Stores the parameter name, value, type, units, and value validation logic.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The parameter name.</p> <code>type</code> <code>Any</code> <p>Expected data type of the parameter value. For list parameters, <code>type</code> is the type of the list elements.</p> <code>value</code> <code>Any</code> <p>The parameter value.</p> <code>units</code> <code>Union[str, None]</code> <p>The parameter units. If the parameter is unitless, <code>units</code> is <code>None</code>.</p> <code>is_list</code> <code>bool</code> <p>Whether the parameter value is a list of values.</p> <code>is_bcs_fl</code> <code>bool</code> <p>Whether the parameter value represents a bcs file path.</p> <code>is_dbase_fl</code> <code>bool</code> <p>Whether the parameter value represents a dbase file path.</p>"},{"location":"nml/#glmpy.nml.nml.NMLParam.__init__","title":"<code>__init__(name, type, value=None, units=None, is_list=False, is_bcs_fl=False, is_dbase_fl=False, val_gt=None, val_gte=None, val_lt=None, val_lte=None, val_switch=None, val_datetime=None, val_type=True)</code>","text":"<p>Initialise a new NML parameter.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The parameter name.</p> required <code>type</code> <code>Any</code> <p>Expected data type of the parameter value. For list parameters, <code>type</code> is the type of the list elements.</p> required <code>value</code> <code>Any</code> <p>The parameter value.</p> <code>None</code> <code>units</code> <code>Union[str, None]</code> <p>The parameter units. If the parameter is unitless, <code>units</code> is <code>None</code>.</p> <code>None</code> <code>is_list</code> <code>bool</code> <p>Whether the parameter value is a list of elements.</p> <code>False</code> <code>is_bcs_fl</code> <code>bool</code> <p>Whether the parameter value represents a bcs file path.</p> <code>False</code> <code>is_dbase_fl</code> <code>bool</code> <p>Whether the parameter value represents a dbase file path.</p> <code>False</code> <code>val_gt</code> <code>Union[None, int, float]</code> <p><code>value</code> must be greater than <code>val_gt</code>. If <code>val_gt</code> is <code>None</code>, no validation occurs.</p> <code>None</code> <code>val_gte</code> <code>Union[None, int, float]</code> <p><code>value</code> must be greater than or equal to <code>val_gte</code>. If <code>val_gte</code> is <code>None</code>, no validation occurs.</p> <code>None</code> <code>val_lt</code> <code>Union[None, int, float]</code> <p><code>value</code> must be less than <code>val_lt</code>. If <code>val_lt</code> is <code>None</code>, no validation occurs.</p> <code>None</code> <code>val_lte</code> <code>Union[None, int, float]</code> <p><code>value</code> must be less than or equal to <code>val_lte</code>. If <code>val_lte</code> is <code>None</code>, no validation occurs.</p> <code>None</code> <code>val_switch</code> <code>Union[None, List[Any]] = None</code> <p><code>value</code> must be one of <code>val_switch</code>. If <code>val_switch</code> is <code>None</code>, no validation occurs.</p> <code>None</code> <code>val_datetime</code> <code>Union[None, List[str]] = None</code> <p><code>value</code> must be one of <code>val_datetime</code>. If <code>val_datetime</code> is <code>None</code>, no validation occurs.</p> <code>None</code> <code>val_type</code> <code>bool</code> <p>If <code>True</code>, <code>value</code> must have type <code>type</code>. If <code>False</code>, no type validation occurs.</p> <code>True</code>"},{"location":"nml/#glmpy.nml.nml.NMLParam.validate","title":"<code>validate()</code>","text":"<p>Validate parameter value.</p> <p>Runs parameter value validation logic. If <code>strict</code> is <code>False</code>, no validation occurs.</p>"},{"location":"nml/#glmpy.nml.nml.NMLReader","title":"<code>NMLReader</code>","text":"<p>Read a NML file.</p> <p>Provides methods that convert a NML file, or a JSON representation of a NML file, to either a dictionary or an instance of a <code>NML</code> subclass.</p> <p>Attributes:</p> Name Type Description <code>nml_path</code> <code>str</code> <p>Path either a NML file or a JSON representation of a NML file.</p>"},{"location":"nml/#glmpy.nml.nml.NMLReader.to_dict","title":"<code>to_dict()</code>","text":"<p>Return a dictionary of the NML file.</p>"},{"location":"nml/#glmpy.nml.nml.NMLReader.to_nml_obj","title":"<code>to_nml_obj(nml_cls)</code>","text":"<p>Return an instance of a <code>NML</code> subclass that has been initialised with the parameters in the NML file.</p> <p>Parameters:</p> Name Type Description Default <code>nml_cls</code> <code>NML</code> <p>Class type to construct, e.g., <code>GLMNML</code> or <code>AEDNML</code>.</p> required"},{"location":"nml/#glmpy.nml.nml.NMLRegistry","title":"<code>NMLRegistry</code>","text":"<p>Register <code>NMLBlock</code> and <code>NML</code> subclasses.</p> <p>A registry that maps <code>block_name</code> and <code>nml_name</code> to the respective <code>NMLBlock</code> and <code>NML</code> subclasses.</p>"},{"location":"nml/#glmpy.nml.nml.NMLRegistry.__init__","title":"<code>__init__(name)</code>","text":"<p>Initialise the registry.</p> <p>Multiple instances of <code>NMLRegistry</code> should not be needed.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the registry.</p> required"},{"location":"nml/#glmpy.nml.nml.NMLRegistry.get_block_cls","title":"<code>get_block_cls(nml_name, block_name)</code>","text":"<p>Return a registered <code>NMLBlock</code> subclass type.</p> <p>Parameters:</p> Name Type Description Default <code>nml_name</code> <code>str</code> <p>Name of the NML.</p> required <code>block_name</code> <code>str</code> <p>Name of the NML block.</p> required"},{"location":"nml/#glmpy.nml.nml.NMLRegistry.get_nml_cls","title":"<code>get_nml_cls(nml_name)</code>","text":"<p>Return a registered <code>NML</code> subclass type.</p> <p>Parameters:</p> Name Type Description Default <code>nml_name</code> <code>str</code> <p>Name of the NML.</p> required"},{"location":"nml/#glmpy.nml.nml.NMLRegistry.register_block","title":"<code>register_block()</code>","text":"<p>Register a <code>NMLBlock</code> subclass under the name <code>cls.block_name</code>. Used as a decorator.</p>"},{"location":"nml/#glmpy.nml.nml.NMLRegistry.register_nml","title":"<code>register_nml()</code>","text":"<p>Register a <code>NML</code> subclass under the name <code>cls.nml_name</code>. Used as a decorator.</p>"},{"location":"nml/#glmpy.nml.nml.NMLWriter","title":"<code>NMLWriter</code>","text":"<p>Write a NML file.</p> <p>Provides methods to write a dictionary as either a NML file or a JSON representation of a NML file.</p> <p>Attributes:</p> Name Type Description <code>nml_dict</code> <code>dict</code> <p>Nested dictionary of the NML file. Keys are the block names, values are dictionaries of parameter names/values.</p>"},{"location":"nml/#glmpy.nml.nml.NMLWriter.to_json","title":"<code>to_json(json_path)</code>","text":"<p>Write the dictionary to a JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>json_path</code> <code>str</code> <p>JSON file path to write.</p> required"},{"location":"nml/#glmpy.nml.nml.NMLWriter.to_nml","title":"<code>to_nml(nml_path)</code>","text":"<p>Write the dictionary to a NML file.</p> <p>Parameters:</p> Name Type Description Default <code>nml_path</code> <code>str</code> <p>NML file path to write.</p> required"},{"location":"plots/","title":"Plots","text":""},{"location":"plots/#glmpy.plots.LakePlotter","title":"<code>LakePlotter</code>","text":"<p>Plot the lake CSV output.</p> <p>Class for reading the lake CSV file and creating common timseries plots on matplotlib Axes objects.</p> <p>Attributes:</p> Name Type Description <code>lake_csv_path</code> <code>str</code> <p>Path to the lake CSV file</p> <code>lake_pd</code> <code>DataFrame</code> <p>Pandas DataFrame of the lake CSV.</p>"},{"location":"plots/#glmpy.plots.LakePlotter.__init__","title":"<code>__init__(lake_csv_path)</code>","text":"<p>Initialise LakePlotter with the lake CSV file path.</p> <p>Parameters:</p> Name Type Description Default <code>lake_csv_path</code> <code>str</code> <p>Path to the lake CSV file.</p> required"},{"location":"plots/#glmpy.plots.LakePlotter.plot_heat_balance_comps","title":"<code>plot_heat_balance_comps(ax, longwave_param_dict={}, shortwave_param_dict={}, latent_heat_param_dict={}, sensible_heat_param_dict={})</code>","text":"<p>Line plot of lake heat balance components.</p> <p>Plots a timeseries of the following heat balance components (W/m^2)) to a matplotlib Axes object: mean longwave radiation, mean shortwave radiation, mean latent heat, mean sensible heat.</p> <p>Parameters:</p> Name Type Description Default <code>ax</code> <code>Axes</code> <p>The matplotlib Axes object to plot on.</p> required <code>longwave_param_dict</code> <code>dict</code> <p>Dictionary of keyword arguments to customise the <code>plot</code> method for <code>Daily Qlw</code>. Default is <code>{}</code>.</p> <code>{}</code> <code>shortwave_param_dict</code> <code>dict</code> <p>Dictionary of keyword arguments to customise the <code>plot</code> method for <code>Daily Qsw</code>. Default is <code>{}</code>.</p> <code>{}</code> <code>latent_heat_param_dict</code> <code>dict</code> <p>Dictionary of keyword arguments to customise the <code>plot</code> method for <code>Daily Qe</code>. Default is <code>{}</code>.</p> <code>{}</code> <code>sensible_heat_param_dict</code> <code>dict</code> <p>Dictionary of keyword arguments to customise the <code>plot</code> method for <code>Daily Qh</code>. Default is <code>{}</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list of Line2D</code> <p>A list of lines representing the plotted data.</p>"},{"location":"plots/#glmpy.plots.LakePlotter.plot_surface_area","title":"<code>plot_surface_area(ax, param_dict={})</code>","text":"<p>Line plot of lake surface area.</p> <p>Plots a timeseries of lake surface area (m^2) to a matplotlib Axes object.</p> <p>Parameters:</p> Name Type Description Default <code>ax</code> <code>Axes</code> <p>The matplotlib Axes object to plot on.</p> required <code>param_dict</code> <code>dict</code> <p>Dictionary of keyword arguments to customise the <code>plot</code> method. Default is <code>{}</code>.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>out</code> <code>List[Line2D]</code> <p>A list of lines representing the plotted data.</p>"},{"location":"plots/#glmpy.plots.LakePlotter.plot_surface_height","title":"<code>plot_surface_height(ax, param_dict={})</code>","text":"<p>Line plot of lake surface height.</p> <p>Plots a timeseries of the lake level (m) to a matplotlib Axes object.</p> <p>Parameters:</p> Name Type Description Default <code>ax</code> <code>Axes</code> <p>The matplotlib Axes object to plot on.</p> required <code>param_dict</code> <code>dict</code> <p>Dictionary of keyword arguments to customise the <code>plot</code> method. Default is <code>{}</code>.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>out</code> <code>List[Line2D]</code> <p>A list of lines representing the plotted data.</p>"},{"location":"plots/#glmpy.plots.LakePlotter.plot_surface_temp","title":"<code>plot_surface_temp(ax, param_dict={})</code>","text":"<p>Line plot of lake surface temperature.</p> <p>Plots a timeseries of the lake surface temperature (celsius) to a matplotlib Axes</p> <p>Parameters:</p> Name Type Description Default <code>ax</code> <code>Axes</code> <p>The matplotlib Axes object to plot on.</p> required <code>param_dict</code> <code>dict</code> <p>Dictionary of keyword arguments to customise the <code>plot</code> method. Default is <code>{}</code>.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>out</code> <code>List[Line2D]</code> <p>A list of lines representing the plotted data.</p>"},{"location":"plots/#glmpy.plots.LakePlotter.plot_temp","title":"<code>plot_temp(ax, min_temp_param_dict={}, max_temp_param_dict={})</code>","text":"<p>Line plot of minimum and maximum lake temperature.</p> <p>Plots a timeseries of the minimum and maximum lake temperature (celsius) to a matplotlib Axes object.</p> <p>Parameters:</p> Name Type Description Default <code>ax</code> <code>Axes</code> <p>The matplotlib Axes object to plot on.</p> required <code>min_temp_param_dict</code> <code>dict</code> <p>Dictionary of keyword arguments to customise the <code>plot</code> method for <code>Min Temp</code>. Default is <code>{}</code>.</p> <code>{}</code> <code>max_temp_param_dict</code> <code>dict</code> <p>Dictionary of keyword arguments to customise the <code>plot</code> method for <code>Max Temp</code>. Default is <code>{}</code>.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>out</code> <code>List[Line2D]</code> <p>A list of lines representing the plotted data.</p>"},{"location":"plots/#glmpy.plots.LakePlotter.plot_volume","title":"<code>plot_volume(ax, param_dict={})</code>","text":"<p>Line plot of lake volume.</p> <p>Plots a timeseries of lake volume (m^3) to a matplotlib Axes object.</p> <p>Parameters:</p> Name Type Description Default <code>ax</code> <code>Axes</code> <p>The matplotlib Axes object to plot on.</p> required <code>param_dict</code> <code>dict</code> <p>Dictionary of keyword arguments to customise the <code>plot</code> method. Default is <code>{}</code>.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>out</code> <code>List[Line2D]</code> <p>A list of lines representing the plotted data.</p>"},{"location":"plots/#glmpy.plots.LakePlotter.plot_water_balance","title":"<code>plot_water_balance(ax, param_dict={})</code>","text":"<p>Line plot of lake water balance.</p> <p>Plots a timeseries of the net water balance (m^3/day) to a matplotlib Axes object. Calculated by: <code>Rain + Snowfall + Local Runoff + Tot Inflow Vol + Evaporation - Tot Outflow Vol</code>.</p> <p>Parameters:</p> Name Type Description Default <code>ax</code> <code>Axes</code> <p>The matplotlib Axes object to plot on.</p> required <code>param_dict</code> <code>dict</code> <p>Dictionary of keyword arguments to customise the <code>plot</code> method. Default is <code>{}</code>.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>out</code> <code>List[Line2D]</code> <p>A list of lines representing the plotted data.</p>"},{"location":"plots/#glmpy.plots.LakePlotter.plot_water_balance_comps","title":"<code>plot_water_balance_comps(ax, inflow_param_dict={}, outflow_param_dict={}, overflow_param_dict={}, evaporation_param_dict={}, rain_param_dict={}, runoff_param_dict={}, snowfall_param_dict={})</code>","text":"<p>Line plot of lake water balance components.</p> <p>Plots a timeseries of the following water balance components (m^3) to a matplotlib Axes object: total inflow, total outflow, overflow, evaporation, rain, local runoff, and snowfall.</p> <p>Parameters:</p> Name Type Description Default <code>ax</code> <code>Axes</code> <p>The matplotlib Axes object to plot on.</p> required <code>inflow_param_dict</code> <code>dict</code> <p>Dictionary of keyword arguments to customise the <code>plot</code> method for <code>Tot Inflow Vol</code>. Default is <code>{}</code>.</p> <code>{}</code> <code>outflow_param_dict</code> <code>dict</code> <p>Dictionary of keyword arguments to customise the <code>plot</code> method for <code>Tot Outflow Vol</code>. Default is <code>{}</code>.</p> <code>{}</code> <code>overflow_param_dict</code> <code>dict</code> <p>Dictionary of keyword arguments to customise the <code>plot</code> method for <code>Overflow Vol</code>. Default is <code>{}</code>.</p> <code>{}</code> <code>evaporation_param_dict</code> <code>dict</code> <p>Dictionary of keyword arguments to customise the <code>plot</code> method for <code>Evaporation</code>. Default is <code>{}</code>.</p> <code>{}</code> <code>rain_param_dict</code> <code>dict</code> <p>Dictionary of keyword arguments to customise the <code>plot</code> method for <code>Rain</code>. Default is <code>{}</code>.</p> <code>{}</code> <code>runoff_param_dict</code> <code>dict</code> <p>Dictionary of keyword arguments to customise the <code>plot</code> method for <code>Local Runoff</code>. Default is <code>{}</code>.</p> <code>{}</code> <code>snowfall_param_dict</code> <code>dict</code> <p>Dictionary of keyword arguments to customise the <code>plot</code> method for <code>Snowfall</code>. Default is <code>{}</code>.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>out</code> <code>List[Line2D]</code> <p>A list of lines representing the plotted data.</p>"},{"location":"plots/#glmpy.plots.NCPlotter","title":"<code>NCPlotter</code>","text":"<p>Plot NetCDF outputs.</p> <p>Class for plotting the GLM output NetCDF file.</p> <p>Attributes:</p> Name Type Description <code>glm_nc_path</code> <code>str</code> <p>Path to the output NetCDF file.</p> <code>resolution</code> <code>float</code> <p>Resolution of the depth range (m).</p> <code>ice_height</code> <code>bool</code> <p>Include ice when calculating surface height.</p> <code>white_ice_height</code> <code>bool</code> <p>Include white ice when calculating surface height.</p> <code>snow_height</code> <code>bool</code> <p>Include snow when calculating surface height.</p>"},{"location":"plots/#glmpy.plots.NCPlotter.__init__","title":"<code>__init__(glm_nc_path, resolution=0.1, ice_height=False, white_ice_height=False, snow_height=False)</code>","text":"<p>Initialise NCPlotter with the output NetCDF file path.</p> <p>Parameters:</p> Name Type Description Default <code>glm_nc_path</code> <code>str</code> <p>Path to the output NetCDF file.</p> required <code>resolution</code> <code>float</code> <p>Resolution of the depth range (m).</p> <code>0.1</code> <code>ice_height</code> <code>bool</code> <p>Include ice when calculating surface height.</p> <code>False</code> <code>white_ice_height</code> <code>bool</code> <p>Include white ice when calculating surface height.</p> <code>False</code> <code>snow_height</code> <code>bool</code> <p>Include snow when calculating surface height.</p> <code>False</code>"},{"location":"plots/#glmpy.plots.NCPlotter.get_long_name","title":"<code>get_long_name(var_name)</code>","text":"<p>Get the long name description of a variable.</p> <p>Parameters:</p> Name Type Description Default <code>var_name</code> <code>str</code> <p>Name of the variable.</p> required <p>Returns:</p> Name Type Description <code>long_name</code> <code>str</code> <p>Long name description of the variable.</p>"},{"location":"plots/#glmpy.plots.NCPlotter.get_profile_var_names","title":"<code>get_profile_var_names()</code>","text":"<p>Gets a list of variable names plottable with <code>plot_profile()</code>.</p> <p>Returns:</p> Name Type Description <code>var_names</code> <code>List[str]</code> <p>Names of plottable variables.</p>"},{"location":"plots/#glmpy.plots.NCPlotter.get_start_datetime","title":"<code>get_start_datetime()</code>","text":"<p>Get the simulation start time.</p> <p>Returns:</p> Name Type Description <code>start</code> <code>datetime</code> <p>Start time of the GLM simulation.</p>"},{"location":"plots/#glmpy.plots.NCPlotter.get_units","title":"<code>get_units(var_name)</code>","text":"<p>Get the units of a variable.</p> <p>Parameters:</p> Name Type Description Default <code>var_name</code> <code>str</code> <p>Name of the variable.</p> required <p>Returns:</p> Name Type Description <code>unit</code> <code>str</code> <p>Units of the variable.</p>"},{"location":"plots/#glmpy.plots.NCPlotter.get_zone_var_names","title":"<code>get_zone_var_names()</code>","text":"<p>Gets a list of variable names plottable with <code>plot_zone()</code>.</p> <p>Returns:</p> Name Type Description <code>var_names</code> <code>List[str]</code> <p>Names of plottable variables.</p>"},{"location":"plots/#glmpy.plots.NCPlotter.plot_profile","title":"<code>plot_profile(ax, var_name, reference='bottom', param_dict={})</code>","text":"<p>Raster plot of a variable profile.</p> <p>Plots a variable for all depths and timesteps to a matplotlib Axes object.</p> <p>Parameters:</p> Name Type Description Default <code>ax</code> <code>Axes</code> <p>The matplotlib Axes object to plot on.</p> required <code>var_name</code> <code>str</code> <p>Name of the variable to plot. To list valid variables, see the <code>get_profile_var_names()</code> method.</p> required <code>reference</code> <code>str</code> <p>Reference frame for depth, either <code>'bottom'</code> or <code>'surface'</code>. Default is \"bottom\".</p> <code>'bottom'</code> <code>param_dict</code> <code>dict</code> <p>Dictionary of keyword arguments to customise the <code>imshow</code> method. Default is <code>{}</code>.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>out</code> <code>AxesImage</code> <p>The plotted image object.</p>"},{"location":"plots/#glmpy.plots.NCPlotter.plot_zone","title":"<code>plot_zone(ax, var_name, zone, param_dict={})</code>","text":"<p>Line plot of a variable for a specified sediment zone.</p> <p>Variables compatiable with <code>plot_zone()</code> are those returned by <code>get_zone_var_names()</code>. The number of valid zones equals <code>n_zones</code> in the <code>sediment</code> block of the <code>glm</code> nml.</p> <p>Parameters:</p> Name Type Description Default <code>ax</code> <code>Axes</code> <p>The Axes to plot on.</p> required <code>var_name</code> <code>str</code> <p>Name of the variable to plot. To list valid variables, see the <code>get_zone_var_names()</code> method.</p> required <code>zone</code> <code>int</code> <p>Zone number. Must be 0 &lt; zone &lt;= n_zones.</p> required <code>param_dict</code> <code>dict</code> <p>Parameters passed to matplotlib.axes.Axes.plot. Default is <code>{}</code>.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>out</code> <code>AxesImage</code> <p>The plotted image object.</p>"},{"location":"plots/#glmpy.plots.WQPlotter","title":"<code>WQPlotter</code>","text":"<p>Plot WQ CSV outputs.</p> <p>Class for reading the WQ CSV file, returning variable names, and plotting variables to a matplotlib Axes object.</p> <p>Attributes:</p> Name Type Description <code>wq_csv_path</code> <code>str</code> <p>Path to the WQ CSV file</p> <code>wq_pd</code> <code>DataFrame</code> <p>Pandas DataFrame of the WQ CSV.</p>"},{"location":"plots/#glmpy.plots.WQPlotter.__init__","title":"<code>__init__(wq_csv_path)</code>","text":"<p>Initialise WQPlotter with the WQ CSV file path.</p> <p>Parameters:</p> Name Type Description Default <code>wq_csv_path</code> <code>str</code> <p>Path to the WQ CSV file.</p> required"},{"location":"plots/#glmpy.plots.WQPlotter.get_var_names","title":"<code>get_var_names()</code>","text":"<p>Returns a list of plottable with <code>plot_var()</code>.</p> <p>Returns:</p> Name Type Description <code>vars</code> <code>List[str]</code> <p>List of variable names.</p>"},{"location":"plots/#glmpy.plots.WQPlotter.plot_var","title":"<code>plot_var(ax, var_name, param_dict={})</code>","text":"<p>Line plot of a WQ CSV variable.</p> <p>Plots a valid variable from <code>get_vars()</code> to a matplotlib Axes object. An optional dictionary of keyword arguments can be provided to customise matplotlib's <code>plot()</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>ax</code> <code>Axes</code> <p>The matplotlib Axes object to plot on.</p> required <code>var_name</code> <code>str</code> <p>The name of the variable to plot.</p> required <code>param_dict</code> <code>dict</code> <p>Dictionary of keyword arguments to customise the <code>plot</code> method. Default is <code>{}</code>.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>out</code> <code>List[Line2D]</code> <p>A list of lines representing the plotted data.</p>"},{"location":"simulation/","title":"Simulation","text":""},{"location":"simulation/#glmpy.simulation.GLMOutputs","title":"<code>GLMOutputs</code>","text":"<p>Return GLM output files.</p> <p>Initialised at the completion of a GLM simulation to record the paths of output files. Provides methods to return the data in these files.</p> <p>Attributes:</p> Name Type Description <code>sim_name</code> <code>str</code> <p>Name of the simulation.</p>"},{"location":"simulation/#glmpy.simulation.GLMOutputs.__init__","title":"<code>__init__(sim_dir_path, out_dir='output', out_fn='output', sim_name='simulation')</code>","text":"<p>Parameters:</p> Name Type Description Default <code>sim_dir_path</code> <code>str</code> <p>Path to the simulation directory.</p> required <code>out_dir</code> <code>str</code> <p>Directory name containing the GLM output files. Set this to  equal the <code>out_dir</code> parameter in the <code>output</code> block of the  <code>glm</code> NML.</p> <code>'output'</code> <code>out_fn</code> <code>str</code> <p>Filename of the main NetCDF output file. Set this to equal  the <code>out_dir</code> parameter in the <code>output</code> block of the <code>glm</code>  NML.</p> <code>'output'</code> <code>sim_name</code> <code>str</code> <p>Name of the simulation.</p> <code>'simulation'</code>"},{"location":"simulation/#glmpy.simulation.GLMOutputs.get_csv_basenames","title":"<code>get_csv_basenames()</code>","text":"<p>Returns a list of CSV basenames in the outputs directory.</p>"},{"location":"simulation/#glmpy.simulation.GLMOutputs.get_csv_path","title":"<code>get_csv_path(csv_basename)</code>","text":"<p>Returns the full file path of a CSV in the outputs directory.</p> <p>Parameters:</p> Name Type Description Default <code>csv_basename</code> <code>str</code> <p>The basename of a CSV in the outputs directory. To see possible basenames, use <code>get_csv_basenames()</code>.</p> required"},{"location":"simulation/#glmpy.simulation.GLMOutputs.get_csv_pd","title":"<code>get_csv_pd(csv_basename)</code>","text":"<p>Returns a Pandas DataFrame of a CSV in the outputs directory.</p> <p>Parameters:</p> Name Type Description Default <code>csv_basename</code> <code>str</code> <p>The basename of a CSV in the outputs directory. To see possible basenames, use <code>get_csv_basenames()</code>.</p> required"},{"location":"simulation/#glmpy.simulation.GLMOutputs.get_netcdf","title":"<code>get_netcdf()</code>","text":"<p>Returns a <code>netCDF4.Dataset</code> instance of the netCDF output file.</p>"},{"location":"simulation/#glmpy.simulation.GLMOutputs.get_netcdf_path","title":"<code>get_netcdf_path()</code>","text":"<p>Returns the path of the netCDF output file.</p>"},{"location":"simulation/#glmpy.simulation.GLMOutputs.zip_csv_outputs","title":"<code>zip_csv_outputs()</code>","text":"<p>Creates a zipfile of csv GLM outputs (csv outputs only).</p> <p>Use this if you do not need a netCDF file of GLM outputs.</p>"},{"location":"simulation/#glmpy.simulation.GLMSim","title":"<code>GLMSim</code>","text":""},{"location":"simulation/#glmpy.simulation.GLMSim.sim_name","title":"<code>sim_name</code>  <code>property</code> <code>writable</code>","text":"<p>Simulation name.</p> <p>Updating <code>sim_name</code> will also update the <code>sim_name</code> parameter of the <code>glm_setup</code> block.</p>"},{"location":"simulation/#glmpy.simulation.GLMSim.__init__","title":"<code>__init__(sim_name, glm_nml=GLMNML(), aed_nml=AEDNML(), bcs={}, aed_dbase={}, sim_dir_path='.')</code>","text":"<p>Parameters:</p> Name Type Description Default <code>sim_name</code> <code>str</code> <p>The simulation name. Updates the <code>sim_name</code> parameter of the <code>glm_setup</code> block.</p> required <code>glm_nml</code> <code>GLMNML</code> <p>The <code>GLMNML</code> object of GLM model parameters.</p> <code>GLMNML()</code> <code>aed_nml</code> <code>AEDNML</code> <p>The <code>aed_nml</code> object of AED model parameters.</p> <code>AEDNML()</code> <code>bcs</code> <code>Dict[str, DataFrame]</code> <p>Dictionary of boundary condition dataframes. The keys are the basename (without extension) of the boundary condition file and the values are Pandas <code>DataFrame</code> objects. For example: <code>{'met_data_filename': met_data_pd}</code>.</p> <code>{}</code> <code>aed_dbase</code> <code>Dict[str, DataFrame]</code> <p>Dictionary of AED database dataframes. The keys are the basename (without extension) of the database file and the values are Pandas <code>DataFrame</code> objects. For example: <code>{'aed_zoop_pars': aed_zoop_pars_pd}</code>. Use <code>read_aed_dbase()</code> to read in database CSV files.</p> <code>{}</code> <code>sim_dir_path</code> <code>str</code> <p>Path to where the simulation directory should be created. Default is the current working directory.</p> <code>'.'</code>"},{"location":"simulation/#glmpy.simulation.GLMSim.from_example_sim","title":"<code>from_example_sim(example_sim_name)</code>  <code>classmethod</code>","text":"<p>Initialise an instance of <code>GLMSim</code> from an example simulation.</p> <p>Parameters:</p> Name Type Description Default <code>example_sim_name</code> <code>str</code> <p>Name of an example simulation bundled with the glm-py package. See <code>get_example_sim_names()</code> for valid names.</p> required"},{"location":"simulation/#glmpy.simulation.GLMSim.from_file","title":"<code>from_file(glmpy_path)</code>  <code>classmethod</code>","text":"<p>Initialise an instance of <code>GLMSim</code> from a .glmpy file.</p> <p>Parameters:</p> Name Type Description Default <code>glmpy_path</code> <code>str</code> <p>Path to .glmpy file.</p> required"},{"location":"simulation/#glmpy.simulation.GLMSim.get_bc_pd","title":"<code>get_bc_pd(bcs_name)</code>","text":"<p>Get a bcs dataframe.</p> <p>Returns a Pandas <code>DataFrame</code> of a specified boundary condition.</p> <p>Parameters:</p> Name Type Description Default <code>bcs_name</code> <code>str</code> <p>Name of the boundary condition.</p> required"},{"location":"simulation/#glmpy.simulation.GLMSim.get_bcs_names","title":"<code>get_bcs_names()</code>","text":"<p>List the bcs names.</p> <p>Returns a list of the keys in the <code>bcs</code> dictionary,</p>"},{"location":"simulation/#glmpy.simulation.GLMSim.get_block","title":"<code>get_block(nml_name, block_name)</code>","text":"<p>Get a NML Block.</p> <p>Returns an instance of a <code>NMLBlock</code> subclass from the NML.</p> <p>Parameters:</p> Name Type Description Default <code>nml_name</code> <code>str</code> <p>The NML name.</p> required <code>block_name</code> <code>str</code> <p>The block name.</p> required"},{"location":"simulation/#glmpy.simulation.GLMSim.get_block_names","title":"<code>get_block_names(nml_name)</code>","text":"<p>List the block names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLBlock</code> subclass instances.</p> <p>Parameters:</p> Name Type Description Default <code>nml_name</code> <code>str</code> <p>The NML name.</p> required"},{"location":"simulation/#glmpy.simulation.GLMSim.get_deepcopy","title":"<code>get_deepcopy()</code>","text":"<p>Copy the <code>GLMSim</code> object.</p> <p>Returns a deep copy of the <code>GLMSim</code>.</p>"},{"location":"simulation/#glmpy.simulation.GLMSim.get_example_sim_names","title":"<code>get_example_sim_names()</code>  <code>staticmethod</code>","text":"<p>Returns a list names for the example simulations bundled in the glm-py package.</p>"},{"location":"simulation/#glmpy.simulation.GLMSim.get_nml","title":"<code>get_nml(nml_name)</code>","text":"<p>Get a NML.</p> <p>Returns an instance of a <code>NML</code> subclass.</p> <p>Parameters:</p> Name Type Description Default <code>nml_name</code> <code>str</code> <p>The NML name.</p> required"},{"location":"simulation/#glmpy.simulation.GLMSim.get_nml_names","title":"<code>get_nml_names()</code>","text":"<p>List the NML names.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NML</code> subclass instances.</p>"},{"location":"simulation/#glmpy.simulation.GLMSim.get_param_names","title":"<code>get_param_names(nml_name, block_name)</code>","text":"<p>List the parameter names in a block.</p> <p>Returns a list of the <code>name</code> attribute for all <code>NMLParam</code> instances.</p> <p>Parameters:</p> Name Type Description Default <code>nml_name</code> <code>str</code> <p>The NML name.</p> required <code>block_name</code> <code>str</code> <p>The block name.</p> required"},{"location":"simulation/#glmpy.simulation.GLMSim.get_param_units","title":"<code>get_param_units(nml_name, block_name, param_name)</code>","text":"<p>Get a parameter's units.</p> <p>Returns the <code>units</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>nml_name</code> <code>str</code> <p>The NML name.</p> required <code>block_name</code> <code>str</code> <p>The block name.</p> required <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"simulation/#glmpy.simulation.GLMSim.get_param_value","title":"<code>get_param_value(nml_name, block_name, param_name)</code>","text":"<p>Get a parameter value.</p> <p>Returns the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>nml_name</code> <code>str</code> <p>The NML name.</p> required <code>block_name</code> <code>str</code> <p>The block name.</p> required <code>param_name</code> <code>str</code> <p>The name of the parameter to return the value for.</p> required"},{"location":"simulation/#glmpy.simulation.GLMSim.get_sim_dir","title":"<code>get_sim_dir()</code>","text":"<p>Return the simulation directory.</p>"},{"location":"simulation/#glmpy.simulation.GLMSim.iter_params","title":"<code>iter_params()</code>","text":"<p>Iterate over all <code>NMLParam</code> objects.</p>"},{"location":"simulation/#glmpy.simulation.GLMSim.prepare_all_inputs","title":"<code>prepare_all_inputs()</code>","text":"<p>Prepare all input files for GLM.</p> <p>Creates the simulation directory and writes the NML, boundary condition, and database files. If the simulation directory already exists, the directory is first deleted.</p>"},{"location":"simulation/#glmpy.simulation.GLMSim.prepare_bcs_and_dbase","title":"<code>prepare_bcs_and_dbase()</code>","text":"<p>Prepare the boundary condition and database files.</p> <p>Writes the boundary condition and datase files to the simulation directory. Creates the directory if it doesn't already exist.</p>"},{"location":"simulation/#glmpy.simulation.GLMSim.prepare_nml","title":"<code>prepare_nml()</code>","text":"<p>Prepare the NML files.</p> <p>Writes the NML files to the simulation directory. Creates the directory if it doesn't already exist.</p>"},{"location":"simulation/#glmpy.simulation.GLMSim.rm_sim_dir","title":"<code>rm_sim_dir()</code>","text":"<p>Delete the simulation directory.</p>"},{"location":"simulation/#glmpy.simulation.GLMSim.run","title":"<code>run(write_log=False, quiet=False, time_sim=False, glm_path=None)</code>","text":"<p>Run the GLM simulation.</p> <p>Validates simulation configuration, prepares input files, and then runs GLM.</p> <p>Parameters:</p> Name Type Description Default <code>write_log</code> <code>bool</code> <p>Write a log file as GLM runs.</p> <code>False</code> <code>quiet</code> <code>bool</code> <p>Suppress the GLM terminal output.</p> <code>False</code> <code>time_sim</code> <code>bool</code> <p>Prints <code>\"Starting {sim_name}\"</code> and <code>\"Finished {sim_name} in {total_duration}\"</code></p> <code>False</code> <code>glm_path</code> <code>Union[str, None]</code> <p>Path to the GLM binary. If <code>None</code>, attempts to use the GLM binary included in glm-py's built distribution.</p> <code>None</code>"},{"location":"simulation/#glmpy.simulation.GLMSim.set_bc","title":"<code>set_bc(bcs_name, bcs_pd)</code>","text":"<p>Adds, or overrides, a boundary condition dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>bcs_name</code> <code>str</code> <p>Boundary condition name.</p> required <code>bcs_pd</code> <code>DataFrame</code> <p>Pandas <code>DataFrame</code> of the boundary condition data.</p> required"},{"location":"simulation/#glmpy.simulation.GLMSim.set_block","title":"<code>set_block(nml_name, block_name, block)</code>","text":"<p>Set a NML Block.</p> <p>Overrides, or adds a new block, to a NML.</p> <p>Parameters:</p> Name Type Description Default <code>nml_name</code> <code>str</code> <p>The NML name.</p> required <code>block_name</code> <code>str</code> <p>The block name.</p> required <code>block</code> <code>NMLBlock</code> <p>The block to set.</p> required"},{"location":"simulation/#glmpy.simulation.GLMSim.set_nml","title":"<code>set_nml(nml_name, nml)</code>","text":"<p>Set NML.</p> <p>Overrides or adds a new NML.</p> <p>Parameters:</p> Name Type Description Default <code>nml_name</code> <code>str</code> <p>The NML name.</p> required <code>nml</code> <code>NML</code> <p>The NML to set.</p> required"},{"location":"simulation/#glmpy.simulation.GLMSim.set_param_value","title":"<code>set_param_value(nml_name, block_name, param_name, value)</code>","text":"<p>Set a parameter value.</p> <p>Sets the <code>value</code> attribute of a <code>NMLParam</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>nml_name</code> <code>str</code> <p>The NML name.</p> required <code>block_name</code> <code>str</code> <p>The block name.</p> required <code>param_name</code> <code>str</code> <p>The parameter name.</p> required <code>value</code> <code>Any</code> <p>The parameter value to set.</p> required"},{"location":"simulation/#glmpy.simulation.GLMSim.to_file","title":"<code>to_file(glmpy_path)</code>","text":"<p>Save the <code>GLMSim</code> object to a .glmpy file</p> <p>Parameters:</p> Name Type Description Default <code>glmpy_path</code> <code>str</code> <p>Output file path. Must have a .glmpy file extension.</p> required"},{"location":"simulation/#glmpy.simulation.GLMSim.validate","title":"<code>validate()</code>","text":"<p>Validate the simulation inputs.</p>"},{"location":"simulation/#glmpy.simulation.MultiSim","title":"<code>MultiSim</code>","text":"<p>Run <code>GLMSim</code> objects in parallel.</p> <p>Uses Python's <code>multiprocessing</code> module to spawn separate processes for simultaneously running multiple <code>GLMSim</code> objects. Useful when many CPU cores are available and many permutations of a simulation need to be run. The number of concurrently running simulations is determined by the number of CPU cores set in the <code>run()</code> method.</p> <p>Attributes:</p> Name Type Description <code>glm_sims</code> <code>List[GLMSim]</code> <p>A list of <code>GLMSim</code> objects to be run across multiple CPU cores.</p>"},{"location":"simulation/#glmpy.simulation.MultiSim.__init__","title":"<code>__init__(glm_sims)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>glm_sims</code> <code>List[GLMSim]</code> <p>A list of <code>GLMSim</code> objects to be run across multiple CPU cores.</p> required"},{"location":"simulation/#glmpy.simulation.MultiSim.cpu_count","title":"<code>cpu_count()</code>  <code>staticmethod</code>","text":"<p>Returns the number of CPU cores.</p>"},{"location":"simulation/#glmpy.simulation.MultiSim.run","title":"<code>run(on_sim_end=None, cpu_count=None, write_log=True, time_sim=True, time_multi_sim=True, glm_path=None)</code>","text":"<p>Run the multi-sim.</p> <p>Parameters:</p> Name Type Description Default <code>on_sim_end</code> <code>Callable[[GLMSim, GLMOutputs], Any]</code> <p>The function to run at the completion of <code>GLMSim.run()</code>. Must take a <code>GLMSim</code> and <code>GLMOutputs</code> object as arguments.</p> <code>None</code> <code>cpu_count</code> <code>Union[int, None]</code> <p>The number of CPU cores to use, i.e., the number of simulations to run in parallel. Default is the maximum number of cores available.</p> <code>None</code> <code>write_log</code> <code>bool</code> <p>Write a log file as GLM runs.</p> <code>True</code> <code>time_sim</code> <code>bool</code> <p>Prints <code>\"Starting {sim_name}\"</code> and <code>\"Finished {sim_name} in {total_duration}\"</code></p> <code>True</code> <code>glm_path</code> <code>Union[str, None]</code> <p>Path to the GLM binary. If <code>None</code>, attempts to use the GLM binary included in glm-py's built distribution.</p> <code>None</code>"},{"location":"simulation/#glmpy.simulation.MultiSim.run_single_sim","title":"<code>run_single_sim(glm_sim, on_sim_end, write_log=True, time_sim=True, glm_path=None)</code>","text":"<p>Run a <code>GLMSim</code> on a single core.</p> <p>Parameters:</p> Name Type Description Default <code>glm_sim</code> <code>GLMSim</code> <p>The <code>GLMSim</code> to run.</p> required <code>on_sim_end</code> <code>Callable[[GLMSim, GLMOutputs], Any]</code> <p>The function to run at the completion of <code>GLMSim.run()</code>. Must take a <code>GLMSim</code> and <code>GLMOutputs</code> object as arguments.</p> required <code>write_log</code> <code>bool</code> <p>Write a log file as GLM runs.</p> <code>True</code> <code>time_sim</code> <code>bool</code> <p>Prints <code>\"Starting {sim_name}\"</code> and <code>\"Finished {sim_name} in {total_duration}\"</code></p> <code>True</code> <code>glm_path</code> <code>Union[str, None]</code> <p>Path to the GLM binary. If <code>None</code>, attempts to use the GLM binary included in glm-py's built distribution.</p> <code>None</code>"},{"location":"simulation/#glmpy.simulation.glmpy_glm_path","title":"<code>glmpy_glm_path()</code>","text":"<p>glm-py GLM binary path.</p> <p>Returns the path to the GLM binary included with the glm-py built distribution. Returns <code>None</code> if the binary was not found.</p>"},{"location":"simulation/#glmpy.simulation.read_aed_dbase","title":"<code>read_aed_dbase(dbase_path)</code>","text":"<p>Read an AED database CSV</p> <p>Returns a Pandas <code>DataFrame</code> of the database that has been transposed to ensure consistent column data types.</p> <p>Parameters:</p> Name Type Description Default <code>dbase_path</code> <code>str</code> <p>Path to the AED database CSV</p> required"},{"location":"simulation/#glmpy.simulation.run_glm","title":"<code>run_glm(sim_dir_path, sim_name='simulation', write_log=False, quiet=False, time_sim=False, glm_path=None)</code>","text":"<p>Run GLM.</p> <p>Runs the GLM binary by providing the path to the GLM NML file.</p> <p>Parameters:</p> Name Type Description Default <code>sim_dir_path</code> <code>str</code> <p>Path to the simulation directory that contains the <code>glm3.nml</code>  file.</p> required <code>sim_name</code> <code>str</code> <p>Name of the simulation.</p> <code>'simulation'</code> <code>write_log</code> <code>bool</code> <p>Write a log file as GLM runs.</p> <code>False</code> <code>quiet</code> <code>bool</code> <p>Suppress the GLM terminal output.</p> <code>False</code> <code>time_sim</code> <code>bool</code> <p>Prints <code>\"Starting {sim_name}\"</code> and <code>\"Finished {sim_name} in {total_duration}\"</code></p> <code>False</code> <code>glm_path</code> <code>Union[str, None]</code> <p>Path to the GLM binary. If <code>None</code>, attempts to use the GLM binary included in glm-py's built distribution.</p> <code>None</code>"},{"location":"simulation/#glmpy.simulation.write_aed_dbase","title":"<code>write_aed_dbase(dbase_pd, dbase_path)</code>","text":"<p>Write an AED database CSV.</p> <p>Writes an AED database CSV that has been read by <code>read_aed_dbase()</code>. Transposes the data back to the original format.</p> <p>Parameters:</p> Name Type Description Default <code>dbase_pd</code> <code>DataFrame</code> <p>Pandas <code>DataFrame</code> of the database.</p> required <code>dbase_path</code> <code>str</code> <p>Path of the database CSV to write.</p> required"},{"location":"blog/","title":"Blog","text":""},{"location":"contributing/","title":"Contributing","text":"<p>glm-py is an open source project that is actively maintained by the Aquatic  EcoDynamics research group at the University of Western Australia. If you'd like to contribute to the project, please familiarise yourself with the contributing guide below.</p>"},{"location":"contributing/#environment","title":"Environment","text":"<p>A Docker container can be used to create a development environment. You can  either build the Docker image:</p> <p><pre><code>docker build -t glm-py-dev .devcontainer\n</code></pre> Or, you can develop glm-py using a dev-container.</p>"},{"location":"contributing/#code-style","title":"Code style","text":"<p>Code linting and formatting uses ruff and black. A script to format the glm-py  repository can be run: <code>./scripts/format.sh</code>. </p> <p>pre-commit is used to run ruff and black. </p>"},{"location":"contributing/#tests","title":"Tests","text":"<p>pytest is used  for testing glm-py. </p> <p>If testing, please add tests under the <code>tests</code> directory. If you need test data  for running tests, add them as <code>pytest.fixtures</code> in <code>conftest.py</code>. </p>"},{"location":"contributing/#pull-requests","title":"Pull requests","text":"<p>Submit pull requests to the <code>next-release</code> branch. This is where glm-py is  actively developed.</p>"},{"location":"contributing/#suggested-contributions","title":"Suggested contributions","text":"<ul> <li><code>aed_nml</code> sub-module: Cover all supported NML blocks and document parameters</li> </ul>"},{"location":"how_to/how-to-dimensions/","title":"How-to: <code>dimensions</code> module","text":"<p>For simple water bodies, the <code>dimensions</code> module provides classes to easily  calculate the <code>h</code> and <code>a</code> (height and surface area) parameters for the  <code>MorphometryBlock</code> class, i.e., the <code>morphometry</code> block. These are:</p> <ul> <li><code>InvertedTruncatedPyramid</code> for pyramidal water bodies  with a square/rectangular base</li> <li><code>InvertedTruncatedCone</code> for circular water bodies.</li> </ul> <p>After initialisation, various getter methods can be called to return lists of the heights (<code>get_heights()</code>), surface areas (<code>get_surface_areas()</code>), and volumes (<code>get_volumes()</code>).</p>"},{"location":"how_to/how-to-dimensions/#initialising-dimensions-classes","title":"Initialising dimensions classes","text":""},{"location":"how_to/how-to-dimensions/#invertedtruncatedpyramid","title":"<code>InvertedTruncatedPyramid</code>","text":"<p><code>InvertedTruncatedPyramid</code> is initialised with the waterbody's surface length,  surface width, depth, and slide slope. The base length and base width are  calculated by the class. In addition, <code>num_vals</code> must be set to control  the length of the lists returned by the various getter methods. This should be  equal to the <code>bsn_vals</code> parameter from the <code>morphometry</code> block. Consider the example below of a waterbody that is 40 m long, 40 m wide, 6 m deep,  and has a side slope of 1/3:</p> <pre><code>from glmpy import dimensions\n\nwb = dimensions.InvertedTruncatedPyramid(\n    height=6,\n    surface_length=40,\n    surface_width=40,\n    num_vals=7,\n    side_slope=1/3\n)\n</code></pre>"},{"location":"how_to/how-to-dimensions/#invertedtruncatedcone","title":"<code>InvertedTruncatedCone</code>","text":"<p><code>InvertedTruncatedCone</code> is initialised with the waterbody's surface radius,  height, and side slope. Like <code>InvertedTruncatedPyramid</code>, <code>num_vals</code> must be  set to control the length of the lists returned by the various getter methods.  Consider the example below of a waterbody with a surface radius of 15 m, slide  slope of 1/3, and is 3 m deep:</p> <pre><code>from glmpy import dimensions\n\nwb = dimensions.InvertedTruncatedCone(\n    surface_radius=15,\n    height=3,\n    side_slope=1/3,\n    num_vals=3\n)\n</code></pre>"},{"location":"how_to/how-to-dimensions/#get-heights-with-get_heights","title":"Get heights with <code>get_heights()</code>","text":"<p>The list of waterbody height values required for the <code>morphometry</code> block's <code>h</code>  parameter can be returned by calling <code>get_heights()</code>. Heights are returned in  order from the bottom of the waterbody to the top.</p> <pre><code>from glmpy import dimensions\n\nwb = dimensions.InvertedTruncatedPyramid(\n    height=6,\n    surface_length=40,\n    surface_width=40,\n    num_vals=7,\n    side_slope=1/3\n)\n\nprint(wb.get_heights())\n</code></pre> <pre><code>[-6.0, -5.0, -4.0, -3.0, -2.0, -1.0, 0.0]\n</code></pre> <pre><code>from glmpy import dimensions\n\nwb = dimensions.InvertedTruncatedCone(\n    surface_radius=15,\n    height=3,\n    side_slope=1/3,\n    num_vals=3\n)\n\nprint(wb.get_heights())\n</code></pre> <pre><code>[-3.0, -1.5, 0.0]\n</code></pre>"},{"location":"how_to/how-to-dimensions/#get-surface-areas-with-get_surface_areas","title":"Get surface areas with <code>get_surface_areas()</code>","text":"<p>The list of waterbody surface areas required for the <code>morphometry</code> block's <code>a</code>  parameter can be returned by calling <code>get_surface_areas()</code>. Each element of  the surface area list corresponds with the heights returned by <code>get_heights()</code>.</p> <pre><code>from glmpy import dimensions\n\nwb = dimensions.InvertedTruncatedPyramid(\n    height=6,\n    surface_length=40,\n    surface_width=40,\n    num_vals=7,\n    side_slope=1/3\n)\n\nprint(wb.get_surface_areas())\n</code></pre> <pre><code>[16.0, 100.0, 256.0, 484.0, 784.0, 1156.0, 1600.0]\n</code></pre> <pre><code>from glmpy import dimensions\n\nwb = dimensions.InvertedTruncatedCone(\n    surface_radius=15,\n    height=3,\n    side_slope=1/3,\n    num_vals=3\n)\n\nprint(wb.get_surface_areas())\n</code></pre> <pre><code>[0.0, 328.6891313818321, 1102.6990214100174]\n</code></pre>"},{"location":"how_to/how-to-dimensions/#get-volumes-with-get_volumes","title":"Get volumes with <code>get_volumes()</code>","text":"<p>A list of waterbody volumes can be returned using <code>get_volumes()</code>. Each element  of the list corresponds with the heights returned by <code>get_volumes()</code>.</p> <pre><code>from glmpy import dimensions\n\nwb = dimensions.InvertedTruncatedPyramid(\n    height=6,\n    surface_length=40,\n    surface_width=40,\n    num_vals=7,\n    side_slope=1/3\n)\n\nprint(wb.get_volumes())\n</code></pre> <pre><code>[0.0, 52.0, 224.0, 588.0, 1216.0, 2180.0, 3552.0]\n</code></pre> <pre><code>from glmpy import dimensions\n\nwb = dimensions.InvertedTruncatedCone(\n    surface_radius=15,\n    height=3,\n    side_slope=1/3,\n    num_vals=3\n)\n\nprint(wb.get_volumes())\n</code></pre> <pre><code>[0.0, 328.6891313818321, 1102.6990214100174]\n</code></pre>"},{"location":"how_to/how-to-dimensions/#adjusting-surface-elevation","title":"Adjusting surface elevation","text":"<p>Heights returned by <code>get_heights()</code> can be adjusted for elevation by setting  the <code>surface_elevation</code> parameter during class initialisation:</p> <pre><code>from glmpy import dimensions\n\nwb = dimensions.InvertedTruncatedPyramid(\n    height=6,\n    surface_length=40,\n    surface_width=40,\n    side_slope=1/3,\n    num_vals=7,\n    surface_elevation=100 # &lt;- Surface elevation of 100 m\n)\n\nprint(wb.get_heights())\n</code></pre> <pre><code>[94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0]\n</code></pre>"},{"location":"how_to/how-to-flows/","title":"How-to: <code>flows</code> module","text":"<p>TO-DO</p>"},{"location":"how_to/how-to-nml/","title":"How-to: <code>nml</code> module","text":"<p>TO-DO</p>"},{"location":"how_to/how-to-plots/","title":"How-to: <code>plots</code> module","text":"<p>glm-py's <code>plots</code> module provides a series of classes for reading and plotting GLM's various output files. They are:</p> <ul> <li><code>LakePlotter</code> for plotting <code>lake.csv</code></li> <li><code>WQPlotter</code> for plotting the depth-specific <code>WQ_*.csv</code> files</li> <li><code>NCPlotter</code> for plotting <code>output.nc</code> </li> </ul> <p>Each class has one or more methods, prefixed with <code>plot_</code>, for creating common GLM visualisations with Matplotlib. These methods implement the  following recommended signature function for wrapping the Matplotlib  library:</p> <pre><code>def my_plotter(ax, data, param_dict):\n    \"\"\"\n    A helper function to make a graph.\n    \"\"\"\n    out = ax.plot(data, **param_dict)\n    return out\n</code></pre> <p>Here, the parameter <code>ax</code> is a matplotlib <code>Axes</code> object, <code>data</code> is the data to  plot, and <code>param_dict</code> is a dictionary of keyword arguments that configure the  wrapped <code>plot</code> method. This approach leaves the figure and axes creation to the  user and avoids adding unnecessary complexity to the wrapping function. See example use below:</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\n\n# Creates two arrays of random data\ndata1, data2 = np.random.randn(2, 25)  \n\n# Creates two subplots and returns the `Axes` object and the `Figure` object\nfig, axs = plt.subplots(1, 2, figsize=(10, 2.7))\n\n# Plots data1 to the first axes with 'x' markers\nmy_plotter(axs[0], data1, {'marker': 'x'})\n\n# Plots data2 to the second axes with 'o' markers\nmy_plotter(axs[1], data2, {'marker': 'o'})\n</code></pre> <p> </p> <p>glm-py's <code>plot_</code> methods do not have a <code>data</code> parameter as reading the data  from file, and processing it, are handled by the class. Instead, some  methods require the user to provide a variable name to plot.</p> <p>The <code>plots</code> module aims to make as few opinionated plotting decisions for the user as possible. Users seeking to further customise plots beyond using the <code>param_dict</code> parameter should refer to the  Matplotlib object-based API. </p>"},{"location":"how_to/how-to-plots/#plotting-lakecsv-with-lakeplotter","title":"Plotting <code>lake.csv</code> with <code>LakePlotter</code>","text":""},{"location":"how_to/how-to-plots/#initialising-lakeplotter","title":"Initialising <code>LakePlotter</code>","text":"<p><code>LakePlotter</code> must be initialised with a path to a <code>lake.csv</code> file:</p> <pre><code>from glmpy import plots\n\n\nlake = plots.LakePlotter(\"sparkling_lake/output/lake.csv\")\n</code></pre> <p>The <code>lake_csv_path</code> attribute can be changed at any time to read and plot a  separate <code>lake.csv</code> file:</p> <pre><code>lake.lake_csv_path = \"grosse_dhuenn/output/lake.csv\"\n</code></pre>"},{"location":"how_to/how-to-plots/#lake-plots","title":"Lake plots","text":"<p>The <code>LakePlotter</code> class provides the following methods for plotting the  <code>lake.csv</code> file:</p> <ul> <li><code>plot_temp()</code> - line plot of minimum and maximum lake temperature.</li> <li><code>plot_volume()</code> - line plot of lake volume.</li> <li><code>plot_surface_temp()</code> - line plot of lake surface temperature.</li> <li><code>plot_surface_area()</code> - line plot of lake surface area.</li> <li><code>plot_surface_height()</code> - line plot of lake surface height.</li> <li><code>plot_water_balance()</code> - line plot of lake water balance.</li> <li><code>plot_water_balance_comps()</code> - line plot of lake water balance components.</li> <li><code>plot_heat_balance_comps()</code> - line plot of lake heat balance components.</li> </ul> <p>To make a plot, initialise <code>LakePlotter</code> and create the Matplotlib <code>Figure</code>  (<code>fig</code>) and <code>Axes</code> (<code>ax</code>)  objects: </p> <pre><code>import matplotlib.pyplot as plt\n\nfrom glmpy import plots\n\n\nlake = plots.LakePlotter(\"sparkling_lake/output/lake.csv\")\n\nfig, ax = plt.subplots(figsize=(10, 5))\n</code></pre> <p>Next, call one of the <code>plot_</code> methods and provide the <code>Axes</code> object to plot  on. Here, a timeseries of the lake volume is plotted with <code>plot_volume()</code> and  saved as a PNG:</p> <pre><code>lake.plot_volume(ax=ax)\n\nfig.savefig(\"lake_volume.png\")\n</code></pre> <p> </p> <p><code>LakePlotter</code>'s plotting methods are easily customisable. The <code>param_dict</code>  parameter is used to pass a dictionary of keyword arguments to Matplotlib's  <code>plot()</code> method. Further customisation can be achieved using the various getter  and setter methods of the <code>Figure</code> and <code>Axes</code> objects. Below, the lake water  balance is plotted with <code>plot_water_balance()</code>. To customise the plot, the  line colour is changed with <code>param_dict</code> parameter and a setter method is  called on the <code>Axes</code> object to change the tick label formatter:  </p> <pre><code>import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\nfrom glmpy import plots\n\n\nlake = plots.LakePlotter(\"sparkling_lake/output/lake.csv\")\n\n# Create a new date formatter\ndate_formatter = mdates.DateFormatter(\"%b %Y\")\n\nfig, ax = plt.subplots(figsize=(10, 5))\n\n# Change the line colour\nlake.plot_water_balance(ax=ax, param_dict={\"color\": \"tomato\"})\n\n# Set the new date formatter\nax.xaxis.set_major_formatter(date_formatter)\n\nfig.savefig(\"water_balance.png\")\n</code></pre> <p> </p> <p><code>LakePlotter</code>'s <code>plot_temp()</code>, <code>plot_heat_balance_comps()</code>, and <code>plot_water_balance_comps()</code> methods plot two or more lines to an <code>Axes</code>  object. In order to customise each line (i.e., each call to Matplotlib's  <code>plot()</code> method), multiple <code>param_dict</code> parameters have been provided. </p>"},{"location":"how_to/how-to-plots/#plotting-outputnc-with-ncplotter","title":"Plotting <code>output.nc</code> with <code>NCPlotter</code>","text":""},{"location":"how_to/how-to-plots/#initialising-ncplotter","title":"Initialising <code>NCPlotter</code>","text":"<p><code>NCPlotter</code> must be initialised with a path to a GLM output NetCDF file.</p> <pre><code>from glmpy import plots\n\n\nnc = plots.NCPlotter(\"sparkling_lake/output/output.nc\")\n</code></pre> <p>The <code>glm_nc_path</code> attribute can be changed at any time to read and plot a  separate NetCDF files:</p> <pre><code>nc = plots.NCPlotter(\"grosse_dhuenn/output/output.nc\")\n</code></pre>"},{"location":"how_to/how-to-plots/#profile-plots","title":"Profile plots","text":"<p><code>NCPlotter</code>'s <code>plot_profile()</code> method plots a variable from the NetCDF for all depth and timesteps. The example below plots temperature (<code>\"temp\"</code> in the  NetCDF file) and saves the output as a PNG:</p> <pre><code>import matplotlib.pyplot as plt\n\nfrom glmpy import plots\n\n\nnc = plots.NCPlotter(\"sparkling_lake/output/output.nc\")\n\nfig, ax = plt.subplots(figsize=(10, 5))\n\nnc.plot_profile(ax=ax, var_name=\"temp\")\n\nfig.savefig(\"temp.png\")\n</code></pre> <p> </p> <p>To add a colour bar, the <code>AxesImage</code> object returned by <code>plot_profile()</code> can  be passed to the <code>colorbar()</code> method of the <code>Figure</code> object:</p> <pre><code>import matplotlib.pyplot as plt\n\nfrom glmpy import plots\n\n\nnc = plots.NCPlotter(\"sparkling_lake/output/output.nc\")\n\nfig, ax = plt.subplots(figsize=(10, 5))\n\nout = nc.plot_profile(ax=ax, var_name=\"temp\") # returns an instance of AxesImage\n\ncol_bar = fig.colorbar(out)\ncol_bar.set_label(\"Temperature (\u00b0C)\")\n\nfig.savefig(\"temp.png\")\n</code></pre> <p> </p> <p>By default, <code>plot_profile</code> will measure the lake depth from the bottom  (<code>reference=\"bottom\"</code>). To reference lake depth from the surface, set the  <code>reference</code> to <code>\"surface\"</code>:</p> <pre><code>import matplotlib.pyplot as plt\n\nfrom glmpy import plots\n\n\nnc = plots.NCPlotter(\"sparkling_lake/output/output.nc\")\n\nfig, ax = plt.subplots(figsize=(10, 5))\n\nout = nc.plot_profile(ax=ax, var_name=\"temp\", reference=\"surface\") \n\ncol_bar = fig.colorbar(out)\ncol_bar.set_label(\"Temperature (\u00b0C)\")\n\nfig.savefig(\"temp.png\")\n</code></pre> <p> </p> <p><code>plot_profile()</code> wraps matplotlib's <code>imshow()</code> method. Just like the methods  of <code>LakePlotter</code>, you can customise how <code>plot_profile)_</code> plots by passing a  dictionary of <code>imshow()</code> parameters to the <code>param_dict</code> parameter. Here, a  profile plot of the lake salinity (<code>\"salt\"</code>) is created with the colour map  changed to <code>\"viridis\"</code>:</p> <pre><code>import matplotlib.pyplot as plt\n\nfrom glmpy import plots\n\n\nnc = plots.NCPlotter(\"sparkling_lake/output/output.nc\")\n\nfig, ax = plt.subplots(figsize=(10, 5))\n\nparams = {\"cmap\": \"viridis\"}\n\nout = nc.plot_profile(ax=ax, var_name=\"salt\", param_dict=params)\n\ncol_bar = fig.colorbar(out)\ncol_bar.set_label(\"Salinity (g/kg)\")\n\nfig.savefig(\"salt.png\")\n</code></pre> <p> </p> <p><code>NCPlotter</code> provides a number of getter methods can assist when making plots  with <code>profile_plot()</code>:</p> <ul> <li><code>get_profile_var_names()</code> returns a list of variable names plottable with  <code>plot_profile()</code>.</li> <li><code>get_long_name()</code> returns the long name description of a variable.</li> <li><code>get_units()</code> returns the units of a variable.</li> <li><code>get_start_datetime()</code> returns the simulation start time.</li> </ul> <p><pre><code>from glmpy import plots\n\n\nnc = plots.NCPlotter(\"sparkling_lake/output/output.nc\")\n\nvars = nc.get_profile_var_names()\nprint(vars)\n</code></pre> <pre><code>['z', 'H', 'V', 'salt', 'temp', 'dens', 'radn', 'extc', 'umean', 'uorb', 'taub']\n</code></pre> <pre><code>print([nc.get_long_name(var) for var in vars[3:5]])\n</code></pre> <pre><code>['salinity', 'temperature']\n</code></pre> <pre><code>print([nc.get_units(var) for var in vars[3:5]])\n</code></pre> <pre><code>['g/kg', 'celsius']\n</code></pre></p> <p>These methods are useful automating the creation of profile plots:</p> <pre><code>import matplotlib.pyplot as plt\n\nfrom glmpy import plots\n\n\nnc = plots.NCPlotter(\"sparkling_lake/output/output.nc\")\n\nvars = nc.get_profile_var_names()\nplot_vars = vars[3:5]\n\nfig, axs = plt.subplots(nrows=2, ncols=1, figsize=(10, 10))\n\nfor idx, var, in enumerate(plot_vars):\n    out = nc.plot_profile(axs[idx], var)\n    long_name = nc.get_long_name(var)\n    units = nc.get_units(var)\n    col_bar = fig.colorbar(out)\n    col_bar.set_label(f\"{long_name} ({units})\")\n\nfig.savefig(\"temp_salt_profiles.png\")\n</code></pre> <p> </p>"},{"location":"how_to/how-to-simulation/","title":"How-to: <code>simulation</code> module","text":""},{"location":"how_to/how-to-simulation/#running-parallel-simulations-with-multisim","title":"Running parallel simulations with <code>MultiSim</code>","text":"<p>The <code>MultiSim</code> class provides an interface for simultaneously running multiple <code>GLMSim</code> objects across separate CPU cores. For tasks where  many permutations of a simulation need to be run, <code>MultiSim</code> can  provide a significant performance boost over running simulations  sequentially.</p>"},{"location":"how_to/how-to-simulation/#a-sequential-example","title":"A sequential example","text":"<p>Before getting started with <code>MultiSim</code>, consider the following example where 10 permutations of Sparkling Lake are run sequentially in order  to assess the impact of changing the light extiction coefficient (<code>kw</code>)  on water temperature:</p> <pre><code>import random\n\nfrom glmpy import simulation as sim\n\n\n# Set a random seed for reproducible results\nrandom.seed(42)\n\n#Initialise and instance of `GLMSim` using the sparkling_lake example\nglm_sim = sim.GLMSim.from_example_sim(\"sparkling_lake\")\n\nnum_sims = 10\nall_results = []\nfor i in range(num_sims):\n    # Pre-run configuration:\n    # 1) Set a unique simulation name\n    # 2) Set a random kw parameter value\n    glm_sim.sim_name = f\"sparkling_{i}\"\n    glm_sim.set_param_value(\"glm\", \"light\", \"kw\", random.random())\n\n    # Run the sim\n    glm_outputs = glm_sim.run()\n\n    # Post-run processing and clean-up: \n    # 1) Calculate mean temperature\n    # 2) Get the kw value\n    # 3) Collect the results\n    # 4) Delete the outputs directory (optional)\n    wq_pd = glm_outputs.get_csv_pd(\"WQ_17\")\n    mean_temp = wq_pd[\"temp\"].mean()\n    kw = glm_sim.get_param_value(\"glm\", \"light\", \"kw\")\n    results = (glm_sim.sim_name, round(kw, 3), round(mean_temp, 3))\n    glm_sim.rm_sim_dir()\n\n    all_results.append(results)\n\nprint(all_results)\n</code></pre> <pre><code>[('sparkling_0', 0.639, 10.818), ('sparkling_1', 0.025, 7.333), ('sparkling_2', 0.275, 10.378), ('sparkling_3', 0.223, 10.39), ('sparkling_4', 0.736, 10.706), ('sparkling_5', 0.677, 10.792), ('sparkling_6', 0.892, 10.754), ('sparkling_7', 0.087, 9.469), ('sparkling_8', 0.422, 10.57), ('sparkling_9', 0.03, 7.631)]\n</code></pre> <p>This example can be broken into three key components: the  configuration, running, and post-processing of each simulation. To use <code>MultiSim</code> the configuration and post-processing components need to be  handled in a slightly different way.</p>"},{"location":"how_to/how-to-simulation/#creating-copies-of-glmsim-objects","title":"Creating copies of <code>GLMSim</code> objects","text":"<p>In the sequential example above, the same <code>GLMSim</code> object was  re-configured with a new <code>sim_name</code> and <code>kw</code> parameter for each run.  To use <code>MultiSim</code>,  a list of <code>GLMSim</code> objects\u2014each independent in  memory\u2014is required. This can easily be achieved by using <code>GLMSim</code>'s  <code>get_deepcopy()</code> method and then appending the newly configured  simulation to a list:</p> <pre><code>import random\n\nfrom glmpy import simulation as sim\n\n\nrandom.seed(42)\n\nglm_sim = sim.GLMSim.from_example_sim(\"sparkling_lake\")\n\nnum_sims = 10\nglm_sims = []\nfor i in range(num_sims):\n    # Create a copy of `glm_sim` in memory\n    new_sim = glm_sim.get_deepcopy()\n\n    # Set the sim_name and kw\n    new_sim.sim_name = f\"sparkling_{i}\"\n    new_sim.set_param_value(\"glm\", \"light\", \"kw\", random.random())\n\n    # Append the sim to a list\n    glm_sims.append(new_sim)\n</code></pre>"},{"location":"how_to/how-to-simulation/#refactoring-the-post-processing","title":"Refactoring the post-processing","text":"<p>When <code>MultiSim</code> runs, a separate Python process is spawned to run a  given <code>GLMSim</code> object on an available CPU core. Once that simulation completes, a user-definable function is then called before the process  is terminated. This function can be used to post-process results in a  way that allows the user to extract desired information before deleting  the output directory. A list of the function outputs is returned to the  user at the completion of running a <code>MultiSim</code>. This allows for a more efficient use of disk space when running large numbers of simulations.</p> <p>To define this function, refactor the four post-processing steps from  the sequential example into a function that takes two arguments: a  <code>GLMSim</code> object and a <code>GLMOutputs</code> object:</p> <pre><code>def on_sim_end(glm_sim: sim.GLMSim, glm_outputs: sim.GLMOutputs):\n    # Collect the results then delete the outputs directory\n    wq_pd = glm_outputs.get_csv_pd(\"WQ_17\")\n    mean_temp = wq_pd[\"temp\"].mean()\n    kw = glm_sim.get_param_value(\"glm\", \"light\", \"kw\")\n    results = (glm_sim.sim_name, round(kw, 3), round(mean_temp, 3))\n    glm_sim.rm_sim_dir()\n\n    # Return the results\n    return results\n</code></pre>"},{"location":"how_to/how-to-simulation/#running-in-parallel","title":"Running in parallel","text":"<p>To run a <code>MultiSim</code>, first initialise the object with the list of  <code>GLMSim</code> objects. Then call the <code>run()</code> method and provide the  function name to be run at the completion of each simulation. The  number CPU cores to use can be optionally defined. By default, this is  the maximum available (as returned by <code>MultiSim.cpu_count()</code>). Upon  completion of <code>run()</code>, a list of the function outputs is returned.</p> <p>Note, due to differences in how separate processes are spawned on  Windows and Unix, use the <code>if __name__ == '__main__':</code> idiom to guard  any code that creates and runs simulations in parallel. This ensures  that the underlying multiprocessing module can safely start worker  processes without unintentionally re-importing or re-running the main  script. Place all simulation setup and calls to <code>MultiSim.run()</code> inside  this guard.</p> <pre><code>import random\n\nfrom glmpy import simulation as sim\n\n\ndef on_sim_end(glm_sim: sim.GLMSim, glm_outputs: sim.GLMOutputs):\n    wq_pd = glm_outputs.get_csv_pd(\"WQ_17\")\n    mean_temp = wq_pd[\"temp\"].mean()\n    kw = glm_sim.get_param_value(\"glm\", \"light\", \"kw\")\n    glm_sim.rm_sim_dir()\n    return (glm_sim.sim_name, round(kw, 3), round(mean_temp, 3))\n\n\nif __name__ == '__main__':\n    random.seed(42)\n\n    glm_sim = sim.GLMSim.from_example_sim(\"sparkling_lake\")\n\n    num_sims = 10\n    glm_sims = []\n    for i in range(num_sims):\n        random_sim = glm_sim.get_deepcopy()\n        random_sim.sim_name = f\"sparkling_{i}\"\n        kw = random.random()\n        random_sim.set_param_value(\"glm\", \"light\", \"kw\", kw)\n        glm_sims.append(random_sim)\n\n    multi_sim = sim.MultiSim(glm_sims=glm_sims)\n\n    outputs = multi_sim.run(\n        on_sim_end=on_sim_end,\n        cpu_count=sim.MultiSim.cpu_count(),\n        write_log=True,\n        time_sim=True,\n        time_multi_sim=True\n    )\n    print(outputs)\n</code></pre> <pre><code>[('sparkling_0', 0.639, 10.818), ('sparkling_1', 0.025, 7.333), ('sparkling_2', 0.275, 10.378), ('sparkling_3', 0.223, 10.39), ('sparkling_4', 0.736, 10.706), ('sparkling_5', 0.677, 10.792), ('sparkling_6', 0.892, 10.754), ('sparkling_7', 0.087, 9.469), ('sparkling_8', 0.422, 10.57), ('sparkling_9', 0.03, 7.631)]\n</code></pre>"},{"location":"release_notes/","title":"Release Notes","text":""},{"location":"release_notes/#glm-py","title":"glm-py","text":""},{"location":"release_notes/#0.4.0","title":"0.4.0 (17 January, 2025)","text":"<ul> <li>Added <code>restart_variables</code> to <code>InitProfilesBlock</code>,  <code>NMLReader._default_converters</code>, and <code>NMLWriter._default_converters</code></li> <li>Added <code>subm_elev</code> to <code>InflowBlock</code>,  <code>NMLReader._default_converters</code>, and <code>NMLWriter._default_converters</code></li> <li>Added <code>list_len</code> parameter to <code>NMLWriter.write_nml_list</code> which inserts line  breaks to the comma-separated output after a specified number of items.  <code>list_len</code> parameter also added to <code>NMLWriter</code> and <code>GLMNML</code>.</li> <li>Removed <code>NMLWriter.write_nml_array</code> and <code>NMLReader.read_nml_array</code>. Usage  replaced in <code>glm_nml</code> and <code>nml</code> modules with  <code>NMLWriter.write_nml_list</code>/<code>NMLReader.read_nml_list</code></li> </ul>"},{"location":"release_notes/#0.3.1","title":"0.3.1 (13 December, 2024)","text":"<ul> <li>Added a <code>plots</code> module for visualising GLM's output files with Matplotlib</li> <li><code>LakePlotter</code> class for plotting the <code>lake.csv</code> file</li> <li><code>NCProfile</code> class for plotting a timeseries profile of variables in the      <code>output.nc</code> file</li> <li><code>matplotlib</code> and <code>netcdf4</code> dependencies added</li> <li>Added a how-to documentation page for the <code>plots</code> module</li> <li>Added a <code>example_sims.sparkling</code> sub-module for running the Sparkling Lake simulation</li> <li><code>load_nml</code> function for returning a dictionary of the Sparkling NML</li> <li><code>load_bcs</code> function for returning a pandas dataframe of the boundary    condition data</li> <li><code>run_sim</code> function for running the Sparkling simulation</li> <li>Added <code>InvertedTruncatedPyramid</code> class to the <code>dimensions</code> module</li> <li>Deprecation warning added to <code>InvertedTruncatedSquarePyramid</code></li> </ul>"},{"location":"release_notes/#0.2.0","title":"0.2.0 (24 June, 2024)","text":"<ul> <li>The <code>nml</code> module has been split into <code>nml</code> and <code>glm_nml</code> sub-modules.</li> <li>The <code>glm_nml</code> sub-module provides high-level NML tools and implements all the  existing classes from the <code>nml</code> module in <code>0.1.3</code>.</li> <li>Classes from <code>0.1.3</code> are automatically imported using    <code>from glmpy import nml</code> to maintain backwards compatibility until <code>1.0.0</code>.</li> <li>Class names from <code>0.1.3</code> will be deprecated by <code>1.0.0</code> in favour of a new    naming convention that ensures forwards compatibility with AED. Warnings are    raised to encourage you to migrate to the new class names.</li> <li>The new <code>nml</code> sub-module provides low-level tools for reading and writing any NML file (GLM or AED).</li> <li><code>NMLWriter</code> converts a nested Python dictionary to an NML file. </li> <li><code>NMLReader</code> converts an NML file to a nested Python dictionary. </li> <li>Both classes provide functionality to explicitly control how each parameter   is read/written to file.</li> <li><code>InvertedTruncatedCone</code> class added to the <code>dimensions</code> module to calculate morphometry parameters for simple circular water bodies.</li> </ul>"},{"location":"release_notes/#0.1.3","title":"0.1.3 (22 March, 2024)","text":"<ul> <li>glm-py released! \ud83d\ude80</li> </ul>"},{"location":"tutorials/","title":"Tutorials","text":""},{"location":"tutorials/2024/06/24/modelling-sparkling-lake-with-glm-py/","title":"Modelling Sparkling Lake with glm-py","text":"<p>This tutorial guides users through the process of setting up a model of  Sparkling Lake using glm-py.</p> <p> </p> <p>Sparkling Lake is an oligotrophic, northern temperate lake (89.7 \u00baN, 46.3 \u00baW) in Winconsin, USA. The lake is approximately 20m deep and covers a surface area of 0.638km<sup>2</sup>. This tutorial serves an introduction to the two core modules of glm-py - <code>nml</code> and <code>simulation</code>. You will use glm-py to model Sparkling Lake for 2 years (1980-04-15 to 1982-04-15).</p> <p>First, install glm-py using <code>pip</code>:</p> <pre><code>pip install glm-py\n</code></pre>"},{"location":"tutorials/2024/06/24/modelling-sparkling-lake-with-glm-py/#creating-a-glm-nml-file","title":"Creating a GLM NML file","text":"<p>Next, import the <code>glm_nml</code> sub-module from the <code>nml</code> module of <code>glmpy</code>:</p> <pre><code>from glmpy.nml import glm_nml\n</code></pre> <p>The <code>glm_nml</code> module provides a set of classes to construct GLM's NML file (<code>.nml</code>).  A NML file is divided into multiple \"blocks\" that configure specific aspects of the model, e.g., the <code>morphometry</code> block defines morphometry of the water body. The structure of a NML file is shown below for the four minimum required blocks (<code>...</code> indicates that the block contains more parameters than shown):</p> <pre><code>&amp;glm_setup\n  sim_name = 'GLMSimulation'\n  ...\n/\n&amp;morphometry\n  lake_name = 'my_lake'\n  ...\n/\n&amp;time\n  timefmt = 3\n  ...\n/\n&amp;init_profiles\n  lake_depth = 10\n  ...\n/\n</code></pre>"},{"location":"tutorials/2024/06/24/modelling-sparkling-lake-with-glm-py/#model-setup","title":"Model setup","text":"<p>GLM simulates the dynamics of a water body by dividing it into a vertically stacked series of layers. The compulsory <code>glm_setup</code> block defines the structure of these layers, e.g., the maximum number of layers, the minimum layer volume, and the minimum and maximum layer thicknesses. To configure the <code>glm_setup</code> parameters for Sparkling Lake, you would typically write a NML file that contains the following:</p> <pre><code>&amp;glm_setup \n   sim_name = 'Sparkling Lake'\n   max_layers = 500\n   min_layer_vol = 0.5\n   min_layer_thick = 0.15\n   max_layer_thick = 0.5\n   density_model = 1\n   non_avg = .true.\n/\n</code></pre> <p>Using glm-py, you instead configure the <code>glm_setup</code> block by using the <code>SetupBlock</code> class from the <code>glm_nml</code> module. Each model parameter of the <code>glm_setup</code> block has a corresponding attribute in the <code>SetupBlock</code> class:</p> <pre><code>glm_setup = glm_nml.SetupBlock(\n    sim_name='Sparkling Lake',\n    max_layers=500,\n    min_layer_vol=0.5,\n    min_layer_thick=0.15,\n    max_layer_thick=0.5,\n    density_model=1,\n    non_avg=True\n)\n</code></pre> <p>This approach offers a number of advantages over editing a raw NML file:</p> <ul> <li>Explicit type hinting for parameter types</li> <li>Native Python syntax</li> <li>Error checking</li> </ul> <p>Once the attributes are set, you can return a dictionary of the consolidated model parameters by calling the <code>get_params</code> method:</p> <pre><code>glm_setup_params = glm_setup.get_params()\nprint(glm_setup_params)\n</code></pre> <pre><code>{'sim_name': 'Sparkling Lake', 'max_layers': 500, 'min_layer_vol': 0.5, 'min_layer_thick': 0.15, 'max_layer_thick': 0.5, 'density_model': 1, 'non_avg': True}\n</code></pre>"},{"location":"tutorials/2024/06/24/modelling-sparkling-lake-with-glm-py/#mixing-and-morphometry","title":"Mixing and morphometry","text":"<p>Next, let's set the parameters that control the mixing processes within Sparkling Lake. Just as <code>SetupBlock</code> defines the <code>glm_setup</code> block, we can configure the <code>mixing</code> block using the <code>MixingBlock</code> class:</p> <pre><code>mixing = glm_nml.MixingBlock(\n    surface_mixing=1,\n    coef_mix_conv=0.2,\n    coef_wind_stir=0.402,\n    coef_mix_shear=0.2,\n    coef_mix_turb=0.51,\n    coef_mix_KH=0.3,\n    deep_mixing=2,\n    coef_mix_hyp=0.5,\n    diff=0.0\n)\n</code></pre> <p>Let's repeat the same for the <code>morphometry</code> block - use the <code>MorphometryBlock</code> class:</p> <pre><code>morphometry = glm_nml.MorphometryBlock(\n    lake_name='Sparkling',\n    latitude=46.00881,\n    longitude=-89.69953,\n    bsn_len=901.0385,\n    bsn_wid=901.0385,\n    crest_elev=320.0,\n    bsn_vals=15,\n    H=[301.712, 303.018285714286, 304.324571428571,\n        305.630857142857, 306.937142857143, 308.243428571429,\n        309.549714285714, 310.856, 312.162285714286,\n        313.468571428571, 314.774857142857, 316.081142857143,\n        317.387428571429, 318.693714285714, 320, 321],\n    A=[0, 45545.8263571429, 91091.6527142857,\n        136637.479071429, 182183.305428571, 227729.131785714,\n        273274.958142857, 318820.7845, 364366.610857143,\n        409912.437214286, 455458.263571429, 501004.089928571,\n        546549.916285714, 592095.742642857, 637641.569, 687641.569]\n)\n</code></pre>"},{"location":"tutorials/2024/06/24/modelling-sparkling-lake-with-glm-py/#setting-the-remaining-blocks","title":"Setting the remaining blocks","text":"<p>There are up to 14 configurable blocks in the GLM NML file - setting each will take some time! Let's speed up the process by reading the remaining blocks from an existing NML file. Download the NML file to your working directory using <code>curl</code>:</p> <pre><code>!curl https://raw.githubusercontent.com/AquaticEcoDynamics/glm-py/main/notebooks/glmpy-demo/glm3.nml --output sparkling_lake.nml\n</code></pre> <p>To read <code>sparkling_lake.nml</code>, we'll use the <code>NMLReader</code> class from the <code>nml.nml</code> sub-module. After importing the sub-module, initalise the <code>NMLReader</code> class and provide the NML file path:</p> <p><pre><code>from glmpy.nml import nml\n\nmy_nml_file = nml.NMLReader(\"sparkling_lake.nml\")\n</code></pre> Next, let's extract the parameters for the <code>meteorology</code> block using the <code>get_block</code> method:</p> <pre><code>meteorology_params = my_nml_file.get_block(\"meteorology\")\n</code></pre> <p>Take a look at what <code>meteorology_params</code> contains:</p> <pre><code>print(meteorology_attrs)\n</code></pre> <pre><code>{'met_sw': True, 'lw_type': 'LW_IN', 'rain_sw': False, 'atm_stab': 0, 'catchrain': False, 'rad_mode': 1, 'albedo_mode': 1, 'cloud_mode': 4, 'fetch_mode': 0, 'subdaily': False, 'meteo_fl': 'bcs/nldas_driver.csv', 'wind_factor': 1.0, 'sw_factor': 1.08, 'lw_factor': 1.0, 'at_factor': 1.0, 'rh_factor': 1.0, 'rain_factor': 1.0, 'ce': 0.00132, 'ch': 0.0014, 'cd': 0.0013, 'rain_threshold': 0.01, 'runoff_coef': 0.3}\n</code></pre> <p>This is a dictionary containing all <code>meteorology</code> parameters from <code>sparkling_lake.nml</code> in Python data types. Look closely at the <code>meteo_fl</code> parameter - what's <code>bcs/nldas_driver.csv</code>? This is a path to a CSV that contains boundary condition data for Sparkling Lake, e.g., daily rainfall, wind speed, and air temperature. You'll need this file to run the model. Let's download it with <code>curl</code> and place it in sub-directory called <code>bcs</code>:</p> <pre><code>!mkdir bcs\n!curl https://raw.githubusercontent.com/AquaticEcoDynamics/glm-py/main/notebooks/glmpy-demo/bcs/nldas_driver.csv --output bcs/nldas_driver.csv\n</code></pre> <p>Now, let's get the parameters for the remaining blocks:  <code>output</code>, <code>init_profiles</code>, <code>time</code>, <code>bird_model</code>, <code>light</code>, <code>sediment</code>. We'll use the <code>get_block</code> method from our instance of <code>NMLReader</code>:</p> <pre><code>output_params=my_nml_file.get_block(\"output\")\ninit_profiles_params=my_nml_file.get_block(\"init_profiles\")\ntime_params=my_nml_file.get_block(\"time\")\nlight_params=my_nml_file.get_block(\"light\")\nbird_model_params=my_nml_file.get_block(\"bird_model\")\nsediment_params=my_nml_file.get_block(\"sediment\")\n</code></pre>"},{"location":"tutorials/2024/06/24/modelling-sparkling-lake-with-glm-py/#writing-the-nml-file","title":"Writing the NML file","text":"<p>We now have a dictionary of model parameters for each block. Let's combine them to create the NML file. First, create an instance of the <code>GLMNML</code> class from the <code>glm_nml</code> sub-module. Then pass in the dictionaries of parameters:</p> <pre><code>my_nml = glm_nml.GLMNML(\n  glm_setup=glm_setup.get_params(),\n  mixing=mixing.get_params(),\n  morphometry=morphometry.get_params(),\n  time=time_params,\n  output=output_params,\n  init_profiles=init_profiles_params,\n  meteorology=meteorology_params,\n  bird_model=bird_model_params,\n  light=light_params,\n  sediment=sediment_params\n)\n</code></pre> <p>Finally, use the <code>write_nml()</code> method to save the <code>.nml</code> to your working directory:</p> <pre><code>my_nml.write_nml(nml_file_path='glm3.nml')\n</code></pre>"},{"location":"tutorials/2024/06/24/modelling-sparkling-lake-with-glm-py/#running-the-model","title":"Running the model","text":"<p>Model configuration is now complete! To run our Sparkling Lake simulation, import the <code>simulation</code> module:</p> <pre><code>from glmpy import simulation\n</code></pre> <p>We now need to specify the location of any files that we'll use in the simulation. For Sparkling Lake, that's just your newly created <code>glm3.nml</code> and the meterological boundary condition file <code>nldas_driver.csv</code>. These will be defined in a dictionary where the key is the filename and the value is the file path:</p> <pre><code>files = {\n    \"glm3.nml\": \"glm3.nml\",\n    \"nldas_driver.csv\": \"bcs/nldas_driver.csv\"\n}\n</code></pre> <p>Now pass this dictionary to a new instance of the <code>GLMSim</code> class. <code>GLMSim</code> is used prepare a new directory of model inputs that we'll point GLM at . Set <code>api</code> to <code>False</code> to run the simulation locally and set <code>inputs_dir</code> to the name of the inputs directory that will be created:</p> <pre><code>glm_sim = simulation.GLMSim(\n  input_files=files,\n  api=False,\n  inputs_dir=\"inputs\"\n)\n</code></pre> <p>Create the <code>inputs</code> directory by calling the <code>.prepare_inputs()</code> method:</p> <pre><code>inputs_dir = glm_sim.prepare_inputs()\n</code></pre> <p>You should now have a new directory that looks like this:</p> <pre><code>\u251c\u2500\u2500 bcs\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 nldas_driver.csv\n\u251c\u2500\u2500 glm3.nml\n</code></pre> <p>Finally, run the simulation by calling the <code>.glm_run()</code> method and pass in the <code>inputs_dir</code> object:</p> <pre><code>glm_sim.glm_run(inputs_dir=inputs_dir)\n</code></pre> <p>Congratulations! You've now configured and run a GLM simulation entirely in Python. You should see a new sub-directory called <code>outputs</code> within the <code>inputs</code> directory that contains the model results.</p>"},{"location":"tutorials/archive/2024/","title":"2024","text":""}]}